<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>10 - 用户资料（患者）</title>
<style id="applicationStylesheet" type="text/css">
	.mediaViewInfo {
		--web-view-name: 10 - 用户资料（患者）;
		--web-view-id: ID10_-_;
		--web-scale-on-resize: true;
		--web-enable-deep-linking: true;
	}
	:root {
		--web-view-ids: ID10_-_;
	}
	* {
		margin: 0;
		padding: 0;
		box-sizing: border-box;
		border: none;
	}
	#ID10_-_ {
		position: absolute;
		width: 414px;
		height: 914px;
		background-color: rgba(245,245,245,1);
		overflow: hidden;
		--web-view-name: 10 - 用户资料（患者）;
		--web-view-id: ID10_-_;
		--web-scale-on-resize: true;
		--web-enable-deep-linking: true;
	}
	@keyframes fadein {
	
		0% {
			opacity: 0;
		}
		100% {
			opacity: 1;
		}
	
	}
	@keyframes  {
	
	
	}
	#ID0800_PM__Remainder {
		display: none;
		left: 226px;
		top: 426px;
		position: absolute;
		overflow: visible;
		width: 141px;
		white-space: nowrap;
		text-align: right;
		font-family: Source Sans Pro;
		font-style: normal;
		font-weight: normal;
		font-size: 14px;
		color: rgba(47,54,61,1);
		letter-spacing: 0.2px;
	}
	#_61 {
		fill: transparent;
		stroke: rgba(47,54,61,1);
		stroke-width: 4px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	._61 {
		display: none;
		overflow: visible;
		position: absolute;
		width: 67px;
		height: 4px;
		left: 173.5px;
		top: 21.5px;
		transform: matrix(1,0,0,1,0,0);
	}
	#menu_icons {
		position: absolute;
		width: 55px;
		height: 55px;
		left: 180px;
		top: 82px;
		display: none;
		overflow: visible;
	}
	#_10 {
		fill: rgba(59,62,81,1);
	}
	._10 {
		position: absolute;
		overflow: visible;
		width: 55px;
		height: 55px;
		left: 0px;
		top: 0px;
	}
	#_3 {
		position: absolute;
		width: 26px;
		height: 8px;
		left: 14.5px;
		top: 24px;
		overflow: visible;
	}
	#_1 {
		fill: transparent;
		stroke: rgba(67,76,120,1);
		stroke-width: 3px;
		stroke-linejoin: miter;
		stroke-linecap: round;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	._1 {
		overflow: visible;
		position: absolute;
		width: 29px;
		height: 3px;
		left: 0px;
		top: 0px;
		transform: matrix(1,0,0,1,0,0);
	}
	#_2 {
		fill: transparent;
		stroke: rgba(67,76,120,1);
		stroke-width: 3px;
		stroke-linejoin: miter;
		stroke-linecap: round;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	._2 {
		overflow: visible;
		position: absolute;
		width: 29px;
		height: 3px;
		left: 0px;
		top: 8px;
		transform: matrix(1,0,0,1,0,0);
	}
	#_ {
		left: 170px;
		top: 251px;
		position: absolute;
		overflow: visible;
		width: 74px;
		white-space: nowrap;
		text-align: left;
		font-family: Hind;
		font-style: normal;
		font-weight: normal;
		font-size: 22px;
		color: rgba(59,62,81,1);
		letter-spacing: 0.22px;
	}
	#__45__ {
		left: 151px;
		top: 283px;
		position: absolute;
		overflow: visible;
		width: 107px;
		white-space: nowrap;
		text-align: left;
		font-family: Adobe Clean;
		font-style: normal;
		font-weight: normal;
		font-size: 14px;
		color: rgba(59,62,81,1);
		letter-spacing: 0.22px;
		text-transform: lowercase;
	}
	#_395 {
		position: absolute;
		width: 57px;
		height: 57px;
		left: 179px;
		top: 182px;
		overflow: visible;
	}
	#ppic {
		position: absolute;
		width: 55px;
		height: 55px;
		left: 0px;
		top: 2px;
		overflow: visible;
	}
	#grayscale-photo-of-man-2659177 {
		position: absolute;
		width: 55px;
		height: 55px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#grayscale-photo-of-man-2659177_bd {
		fill: transparent;
	}
	.grayscale-photo-of-man-2659177_bd {
		position: absolute;
		overflow: visible;
		width: 55px;
		height: 55px;
		left: 0px;
		top: 0px;
	}
	#dot {
		position: absolute;
		width: 14px;
		height: 14px;
		left: 43px;
		top: 0px;
		overflow: visible;
	}
	#_12 {
		fill: rgba(245,245,245,1);
	}
	._12 {
		position: absolute;
		overflow: visible;
		width: 14px;
		height: 14px;
		left: 0px;
		top: 0px;
	}
	#_13 {
		fill: rgba(106,194,126,1);
	}
	._13 {
		position: absolute;
		overflow: visible;
		width: 8px;
		height: 8px;
		left: 3px;
		top: 3px;
	}
	#_5627 {
		fill: rgba(106,194,126,1);
	}
	._5627 {
		overflow: visible;
		position: absolute;
		width: 18px;
		height: 16.002px;
		left: 271.5px;
		top: 284.999px;
		transform: matrix(1,0,0,1,0,0);
		--web-animation: fadein 0.3s ease-out;
		--web-action-type: page;
		--web-action-target: 11___________.html;
		cursor: pointer;
	}
	#_56 {
		fill: rgba(255,255,255,1);
		stroke: rgba(237,237,237,1);
		stroke-width: 1px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	._56 {
		position: absolute;
		overflow: visible;
		width: 414px;
		height: 248px;
		left: 0px;
		top: 325px;
	}
	# {
		opacity: 0.7;
		left: 34px;
		top: 391px;
		position: absolute;
		overflow: visible;
		width: 29px;
		white-space: nowrap;
		line-height: 67px;
		margin-top: -26.5px;
		text-align: left;
		font-family: Adobe Clean;
		font-style: normal;
		font-weight: normal;
		font-size: 14px;
		color: rgba(47,54,61,1);
	}
	#_bk {
		opacity: 0.7;
		left: 34px;
		top: 496px;
		position: absolute;
		overflow: visible;
		width: 29px;
		white-space: nowrap;
		line-height: 67px;
		margin-top: -26.5px;
		text-align: left;
		font-family: Adobe Clean;
		font-style: normal;
		font-weight: normal;
		font-size: 14px;
		color: rgba(47,54,61,1);
	}
	#_bl {
		opacity: 0.7;
		left: 225px;
		top: 391px;
		position: absolute;
		overflow: visible;
		width: 29px;
		white-space: nowrap;
		line-height: 67px;
		margin-top: -26.5px;
		text-align: left;
		font-family: Adobe Clean;
		font-style: normal;
		font-weight: normal;
		font-size: 14px;
		color: rgba(47,54,61,1);
	}
	#_bm {
		opacity: 0.7;
		left: 225px;
		top: 496px;
		position: absolute;
		overflow: visible;
		width: 57px;
		white-space: nowrap;
		line-height: 67px;
		margin-top: -26.5px;
		text-align: left;
		font-family: Adobe Clean;
		font-style: normal;
		font-weight: normal;
		font-size: 14px;
		color: rgba(47,54,61,1);
	}
	#ID10_ {
		left: 34px;
		top: 413px;
		position: absolute;
		overflow: visible;
		width: 67px;
		white-space: nowrap;
		text-align: left;
		font-family: Hind;
		font-style: normal;
		font-weight: normal;
		font-size: 16px;
		color: rgba(47,54,61,1);
	}
	#ID8_ {
		left: 34px;
		top: 518px;
		position: absolute;
		overflow: visible;
		width: 93px;
		white-space: nowrap;
		--web-animation: fadein 0.3s ease-out;
		--web-action-type: page;
		--web-action-target: 06__________.html;
		cursor: pointer;
		text-align: left;
		font-family: Hind;
		font-style: normal;
		font-weight: normal;
		font-size: 16px;
		color: rgba(47,54,61,1);
	}
	#ID7_ {
		left: 225px;
		top: 413px;
		position: absolute;
		overflow: visible;
		width: 60px;
		white-space: nowrap;
		text-align: left;
		font-family: Hind;
		font-style: normal;
		font-weight: normal;
		font-size: 16px;
		color: rgba(47,54,61,1);
	}
	#ID4_ {
		left: 225px;
		top: 518px;
		position: absolute;
		overflow: visible;
		width: 94px;
		white-space: nowrap;
		text-align: left;
		font-family: Hind;
		font-style: normal;
		font-weight: normal;
		font-size: 16px;
		color: rgba(47,54,61,1);
	}
	#_5626 {
		fill: rgba(106,194,126,1);
	}
	._5626 {
		overflow: visible;
		position: absolute;
		width: 25.004px;
		height: 15.008px;
		left: 225px;
		top: 361.996px;
		transform: matrix(1,0,0,1,0,0);
	}
	#_5623 {
		fill: rgba(106,194,126,1);
	}
	._5623 {
		overflow: visible;
		position: absolute;
		width: 20px;
		height: 18.75px;
		left: 225px;
		top: 465.75px;
		transform: matrix(1,0,0,1,0,0);
	}
	#_5625 {
		fill: rgba(106,194,126,1);
	}
	._5625 {
		overflow: visible;
		position: absolute;
		width: 17.5px;
		height: 20px;
		left: 34px;
		top: 359.5px;
		transform: matrix(1,0,0,1,0,0);
	}
	#_5624 {
		fill: rgba(106,194,126,1);
	}
	._5624 {
		overflow: visible;
		position: absolute;
		width: 20px;
		height: 19.998px;
		left: 34px;
		top: 464.502px;
		transform: matrix(1,0,0,1,0,0);
	}
	#_137 {
		fill: rgba(255,255,255,1);
		stroke: rgba(237,237,237,1);
		stroke-width: 1px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	._137 {
		position: absolute;
		overflow: visible;
		width: 414px;
		height: 90px;
		left: 0px;
		top: 591px;
	}
	#_138 {
		fill: rgba(255,255,255,1);
		stroke: rgba(237,237,237,1);
		stroke-width: 1px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	._138 {
		position: absolute;
		overflow: visible;
		width: 414px;
		height: 90px;
		left: 0px;
		top: 697px;
	}
	#_bx {
		opacity: 0.7;
		left: 30px;
		top: 611px;
		position: absolute;
		overflow: visible;
		width: 43px;
		white-space: nowrap;
		line-height: 67px;
		margin-top: -26.5px;
		text-align: left;
		font-family: Adobe Clean;
		font-style: normal;
		font-weight: normal;
		font-size: 14px;
		color: rgba(47,54,61,1);
	}
	#_by {
		opacity: 0.7;
		left: 30px;
		top: 717px;
		position: absolute;
		overflow: visible;
		width: 57px;
		white-space: nowrap;
		line-height: 67px;
		margin-top: -26.5px;
		text-align: left;
		font-family: Adobe Clean;
		font-style: normal;
		font-weight: normal;
		font-size: 14px;
		color: rgba(47,54,61,1);
	}
	#ID7__bz {
		left: 30px;
		top: 638px;
		position: absolute;
		overflow: visible;
		width: 92px;
		white-space: nowrap;
		text-align: left;
		font-family: Hind;
		font-style: normal;
		font-weight: normal;
		font-size: 16px;
		color: rgba(47,54,61,1);
	}
	#_b {
		left: 30px;
		top: 744px;
		position: absolute;
		overflow: visible;
		width: 97px;
		white-space: nowrap;
		text-align: left;
		font-family: Hind;
		font-style: normal;
		font-weight: normal;
		font-size: 16px;
		color: rgba(47,54,61,1);
		text-transform: capitalize;
	}
	#_5621 {
		fill: rgba(106,194,126,1);
	}
	._5621 {
		overflow: visible;
		position: absolute;
		width: 21px;
		height: 20.911px;
		left: 363px;
		top: 625.544px;
		transform: matrix(1,0,0,1,0,0);
	}
	#_5620 {
		fill: rgba(106,194,126,1);
	}
	._5620 {
		overflow: visible;
		position: absolute;
		width: 21px;
		height: 20.911px;
		left: 363px;
		top: 731.544px;
		transform: matrix(1,0,0,1,0,0);
	}
	#_129 {
		fill: rgba(245,245,245,1);
	}
	._129 {
		position: absolute;
		overflow: visible;
		width: 414px;
		height: 187px;
		left: 0px;
		top: -5px;
	}
	#_5629 {
		fill: rgba(59,62,81,1);
	}
	._5629 {
		overflow: visible;
		position: absolute;
		width: 21.313px;
		height: 21.313px;
		left: 20.344px;
		top: 137.094px;
		transform: matrix(1,0,0,1,0,0);
		--web-animation: fadein undefineds undefined;
		--web-action-type: page;
		--web-action-target: 05_________.html;
		cursor: pointer;
	}
	#_ca {
		left: 54px;
		top: 133px;
		position: absolute;
		overflow: visible;
		width: 90px;
		white-space: nowrap;
		text-align: left;
		font-family: Hind;
		font-style: normal;
		font-weight: normal;
		font-size: 22px;
		color: rgba(59,62,81,1);
		letter-spacing: 0.22px;
	}
	#menu_icons_b {
		position: absolute;
		width: 55px;
		height: 55px;
		left: 180px;
		top: 35px;
		overflow: visible;
	}
	#_10_b {
		fill: rgba(59,62,81,1);
	}
	._10_b {
		position: absolute;
		overflow: visible;
		width: 55px;
		height: 55px;
		left: 0px;
		top: 0px;
	}
	#_3_b {
		position: absolute;
		width: 26px;
		height: 8px;
		left: 14.5px;
		top: 24px;
		overflow: visible;
	}
	#_1_b {
		fill: transparent;
		stroke: rgba(255,255,255,1);
		stroke-width: 3px;
		stroke-linejoin: miter;
		stroke-linecap: round;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	._1_b {
		overflow: visible;
		position: absolute;
		width: 29px;
		height: 3px;
		left: 0px;
		top: 0px;
		transform: matrix(1,0,0,1,0,0);
	}
	#_2_ca {
		fill: transparent;
		stroke: rgba(255,255,255,1);
		stroke-width: 3px;
		stroke-linejoin: miter;
		stroke-linecap: round;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	._2_ca {
		overflow: visible;
		position: absolute;
		width: 29px;
		height: 3px;
		left: 0px;
		top: 8px;
		transform: matrix(1,0,0,1,0,0);
	}
</style>
<script id="applicationScript">
///////////////////////////////////////
// INITIALIZATION
///////////////////////////////////////

/**
 * Functionality for scaling, showing by media query, and navigation between multiple pages on a single page. 
 * Code subject to change.
 **/

if (window.console==null) { window["console"] = { log : function() {} } }; // some browsers do not set console

var Application = function() {
	// event constants
	this.prefix = "--web-";
	this.NAVIGATION_CHANGE = "viewChange";
	this.VIEW_NOT_FOUND = "viewNotFound";
	this.VIEW_CHANGE = "viewChange";
	this.VIEW_CHANGING = "viewChanging";
	this.STATE_NOT_FOUND = "stateNotFound";
	this.APPLICATION_COMPLETE = "applicationComplete";
	this.APPLICATION_RESIZE = "applicationResize";
	this.SIZE_STATE_NAME = "data-is-view-scaled";
	this.STATE_NAME = this.prefix + "state";

	this.lastTrigger = null;
	this.lastView = null;
	this.lastState = null;
	this.lastOverlay = null;
	this.currentView = null;
	this.currentState = null;
	this.currentOverlay = null;
	this.currentQuery = {index: 0, rule: null, mediaText: null, id: null};
	this.inclusionQuery = "(min-width: 0px)";
	this.exclusionQuery = "none and (min-width: 99999px)";
	this.LastModifiedDateLabelName = "LastModifiedDateLabel";
	this.viewScaleSliderId = "ViewScaleSliderInput";
	this.pageRefreshedName = "showPageRefreshedNotification";
	this.applicationStylesheet = null;
	this.mediaQueryDictionary = {};
	this.viewsDictionary = {};
	this.addedViews = [];
	this.views = {};
	this.viewIds = [];
	this.viewQueries = {};
	this.overlays = {};
	this.overlayIds = [];
	this.numberOfViews = 0;
	this.verticalPadding = 0;
	this.horizontalPadding = 0;
	this.stateName = null;
	this.viewScale = 1;
	this.viewLeft = 0;
	this.viewTop = 0;
	this.horizontalScrollbarsNeeded = false;
	this.verticalScrollbarsNeeded = false;

	// view settings
	this.showUpdateNotification = false;
	this.showNavigationControls = false;
	this.scaleViewsToFit = false;
	this.scaleToFitOnDoubleClick = false;
	this.actualSizeOnDoubleClick = false;
	this.scaleViewsOnResize = false;
	this.navigationOnKeypress = false;
	this.showViewName = false;
	this.enableDeepLinking = true;
	this.refreshPageForChanges = false;
	this.showRefreshNotifications = true;

	// view controls
	this.scaleViewSlider = null;
	this.lastModifiedLabel = null;
	this.supportsPopState = false; // window.history.pushState!=null;
	this.initialized = false;

	// refresh properties
	this.refreshDuration = 250;
	this.lastModifiedDate = null;
	this.refreshRequest = null;
	this.refreshInterval = null;
	this.refreshContent = null;
	this.refreshContentSize = null;
	this.refreshCheckContent = false;
	this.refreshCheckContentSize = false;

	var self = this;

	self.initialize = function(event) {
		var view = self.getVisibleView();
		var views = self.getVisibleViews();
		if (view==null) view = self.getInitialView();
		self.collectViews();
		self.collectOverlays();
		self.collectMediaQueries();

		for (let index = 0; index < views.length; index++) {
			var view = views[index];
			self.setViewOptions(view);
			self.setViewVariables(view);
			self.centerView(view);
		}

		// sometimes the body size is 0 so we call this now and again later
		if (self.initialized) {
			window.addEventListener(self.NAVIGATION_CHANGE, self.viewChangeHandler);
			window.addEventListener("keyup", self.keypressHandler);
			window.addEventListener("keypress", self.keypressHandler);
			window.addEventListener("resize", self.resizeHandler);
			window.document.addEventListener("dblclick", self.doubleClickHandler);

			if (self.supportsPopState) {
				window.addEventListener('popstate', self.popStateHandler);
			}
			else {
				window.addEventListener('hashchange', self.hashChangeHandler);
			}

			// we are ready to go
			window.dispatchEvent(new Event(self.APPLICATION_COMPLETE));
		}

		if (self.initialized==false) {
			if (self.enableDeepLinking) {
				self.syncronizeViewToURL();
			} 
	
			if (self.refreshPageForChanges) {
				self.setupRefreshForChanges();
			}
	
			self.initialized = true;
		}
		
		if (self.scaleViewsToFit) {
			self.viewScale = self.scaleViewToFit(view);
			
			if (self.viewScale<0) {
				setTimeout(self.scaleViewToFit, 500, view);
			}
		}
		else if (view) {
			self.viewScale = self.getViewScaleValue(view);
			self.centerView(view);
			self.updateSliderValue(self.viewScale);
		}
		else {
			// no view found
		}
	
		if (self.showUpdateNotification) {
			self.showNotification();
		}

		//"addEventListener" in window ? null : window.addEventListener = window.attachEvent;
		//"addEventListener" in document ? null : document.addEventListener = document.attachEvent;
	}


	///////////////////////////////////////
	// AUTO REFRESH 
	///////////////////////////////////////

	self.setupRefreshForChanges = function() {
		self.refreshRequest = new XMLHttpRequest();

		if (!self.refreshRequest) {
			return false;
		}

		// get document start values immediately
		self.requestRefreshUpdate();
	}

	/**
	 * Attempt to check the last modified date by the headers 
	 * or the last modified property from the byte array (experimental)
	 **/
	self.requestRefreshUpdate = function() {
		var url = document.location.href;
		var protocol = window.location.protocol;
		var method;
		
		try {

			if (self.refreshCheckContentSize) {
				self.refreshRequest.open('HEAD', url, true);
			}
			else if (self.refreshCheckContent) {
				self.refreshContent = document.documentElement.outerHTML;
				self.refreshRequest.open('GET', url, true);
				self.refreshRequest.responseType = "text";
			}
			else {

				// get page last modified date for the first call to compare to later
				if (self.lastModifiedDate==null) {

					// File system does not send headers in FF so get blob if possible
					if (protocol=="file:") {
						self.refreshRequest.open("GET", url, true);
						self.refreshRequest.responseType = "blob";
					}
					else {
						self.refreshRequest.open("HEAD", url, true);
						self.refreshRequest.responseType = "blob";
					}

					self.refreshRequest.onload = self.refreshOnLoadOnceHandler;

					// In some browsers (Chrome & Safari) this error occurs at send: 
					// 
					// Chrome - Access to XMLHttpRequest at 'file:///index.html' from origin 'null' 
					// has been blocked by CORS policy: 
					// Cross origin requests are only supported for protocol schemes: 
					// http, data, chrome, chrome-extension, https.
					// 
					// Safari - XMLHttpRequest cannot load file:///Users/user/Public/index.html. Cross origin requests are only supported for HTTP.
					// 
					// Solution is to run a local server, set local permissions or test in another browser
					self.refreshRequest.send(null);

					// In MS browsers the following behavior occurs possibly due to an AJAX call to check last modified date: 
					// 
					// DOM7011: The code on this page disabled back and forward caching.

					// In Brave (Chrome) error when on the server
					// index.js:221 HEAD https://www.example.com/ net::ERR_INSUFFICIENT_RESOURCES
					// self.refreshRequest.send(null);

				}
				else {
					self.refreshRequest = new XMLHttpRequest();
					self.refreshRequest.onreadystatechange = self.refreshHandler;
					self.refreshRequest.ontimeout = function() {
						self.log("Couldn't find page to check for updates");
					}
					
					var method;
					if (protocol=="file:") {
						method = "GET";
					}
					else {
						method = "HEAD";
					}

					//refreshRequest.open('HEAD', url, true);
					self.refreshRequest.open(method, url, true);
					self.refreshRequest.responseType = "blob";
					self.refreshRequest.send(null);
				}
			}
		}
		catch (error) {
			self.log("Refresh failed for the following reason:")
			self.log(error);
		}
	}

	self.refreshHandler = function() {
		var contentSize;

		try {

			if (self.refreshRequest.readyState === XMLHttpRequest.DONE) {
				
				if (self.refreshRequest.status === 2 || 
					self.refreshRequest.status === 200) {
					var pageChanged = false;

					self.updateLastModifiedLabel();

					if (self.refreshCheckContentSize) {
						var lastModifiedHeader = self.refreshRequest.getResponseHeader("Last-Modified");
						contentSize = self.refreshRequest.getResponseHeader("Content-Length");
						//lastModifiedDate = refreshRequest.getResponseHeader("Last-Modified");
						var headers = self.refreshRequest.getAllResponseHeaders();
						var hasContentHeader = headers.indexOf("Content-Length")!=-1;
						
						if (hasContentHeader) {
							contentSize = self.refreshRequest.getResponseHeader("Content-Length");

							// size has not been set yet
							if (self.refreshContentSize==null) {
								self.refreshContentSize = contentSize;
								// exit and let interval call this method again
								return;
							}

							if (contentSize!=self.refreshContentSize) {
								pageChanged = true;
							}
						}
					}
					else if (self.refreshCheckContent) {

						if (self.refreshRequest.responseText!=self.refreshContent) {
							pageChanged = true;
						}
					}
					else {
						lastModifiedHeader = self.getLastModified(self.refreshRequest);

						if (self.lastModifiedDate!=lastModifiedHeader) {
							self.log("lastModifiedDate:" + self.lastModifiedDate + ",lastModifiedHeader:" +lastModifiedHeader);
							pageChanged = true;
						}

					}

					
					if (pageChanged) {
						clearInterval(self.refreshInterval);
						self.refreshUpdatedPage();
						return;
					}

				}
				else {
					self.log('There was a problem with the request.');
				}

			}
		}
		catch( error ) {
			//console.log('Caught Exception: ' + error);
		}
	}

	self.refreshOnLoadOnceHandler = function(event) {

		// get the last modified date
		if (self.refreshRequest.response) {
			self.lastModifiedDate = self.getLastModified(self.refreshRequest);

			if (self.lastModifiedDate!=null) {

				if (self.refreshInterval==null) {
					self.refreshInterval = setInterval(self.requestRefreshUpdate, self.refreshDuration);
				}
			}
			else {
				self.log("Could not get last modified date from the server");
			}
		}
	}

	self.refreshUpdatedPage = function() {
		if (self.showRefreshNotifications) {
			var date = new Date().setTime((new Date().getTime()+10000));
			document.cookie = encodeURIComponent(self.pageRefreshedName) + "=true" + "; max-age=6000;" + " path=/";
		}

		document.location.reload(true);
	}

	self.showNotification = function(duration) {
		var notificationID = self.pageRefreshedName+"ID";
		var notification = document.getElementById(notificationID);
		if (duration==null) duration = 4000;

		if (notification!=null) {return;}

		notification = document.createElement("div");
		notification.id = notificationID;
		notification.textContent = "PAGE UPDATED";
		var styleRule = ""
		styleRule = "position: fixed; padding: 7px 16px 6px 16px; font-family: Arial, sans-serif; font-size: 10px; font-weight: bold; left: 50%;";
		styleRule += "top: 20px; background-color: rgba(0,0,0,.5); border-radius: 12px; color:rgb(235, 235, 235); transition: all 2s linear;";
		styleRule += "transform: translateX(-50%); letter-spacing: .5px; filter: drop-shadow(2px 2px 6px rgba(0, 0, 0, .1))";
		notification.setAttribute("style", styleRule);

		notification.className= "PageRefreshedClass";
		
		document.body.appendChild(notification);

		setTimeout(function() {
			notification.style.opacity = "0";
			notification.style.filter = "drop-shadow( 0px 0px 0px rgba(0,0,0, .5))";
			setTimeout(function() {
				notification.parentNode.removeChild(notification);
			}, duration)
		}, duration);

		document.cookie = encodeURIComponent(self.pageRefreshedName) + "=; max-age=1; path=/";
	}

	/**
	 * Get the last modified date from the header 
	 * or file object after request has been received
	 **/
	self.getLastModified = function(request) {
		var date;

		// file protocol - FILE object with last modified property
		if (request.response && request.response.lastModified) {
			date = request.response.lastModified;
		}
		
		// http protocol - check headers
		if (date==null) {
			date = request.getResponseHeader("Last-Modified");
		}

		return date;
	}

	self.updateLastModifiedLabel = function() {
		var labelValue = "";
		
		if (self.lastModifiedLabel==null) {
			self.lastModifiedLabel = document.getElementById("LastModifiedLabel");
		}

		if (self.lastModifiedLabel) {
			var seconds = parseInt(((new Date().getTime() - Date.parse(document.lastModified)) / 1000 / 60) * 100 + "");
			var minutes = 0;
			var hours = 0;

			if (seconds < 60) {
				seconds = Math.floor(seconds/10)*10;
				labelValue = seconds + " seconds";
			}
			else {
				minutes = parseInt((seconds/60) + "");

				if (minutes>60) {
					hours = parseInt((seconds/60/60) +"");
					labelValue += hours==1 ? " hour" : " hours";
				}
				else {
					labelValue = minutes+"";
					labelValue += minutes==1 ? " minute" : " minutes";
				}
			}
			
			if (seconds<10) {
				labelValue = "Updated now";
			}
			else {
				labelValue = "Updated " + labelValue + " ago";
			}

			if (self.lastModifiedLabel.firstElementChild) {
				self.lastModifiedLabel.firstElementChild.textContent = labelValue;

			}
			else if ("textContent" in self.lastModifiedLabel) {
				self.lastModifiedLabel.textContent = labelValue;
			}
		}
	}

	self.getShortString = function(string, length) {
		if (length==null) length = 30;
		string = string!=null ? string.substr(0, length).replace(/\n/g, "") : "[String is null]";
		return string;
	}

	self.getShortNumber = function(value, places) {
		if (places==null || places<1) places = 4;
		value = Math.round(value * Math.pow(10,places)) / Math.pow(10, places);
		return value;
	}

	///////////////////////////////////////
	// NAVIGATION CONTROLS
	///////////////////////////////////////

	self.updateViewLabel = function() {
		var viewNavigationLabel = document.getElementById("ViewNavigationLabel");
		var view = self.getVisibleView();
		var viewIndex = view ? self.getViewIndex(view) : -1;
		var viewName = view ? self.getViewPreferenceValue(view, self.prefix + "view-name") : null;
		var viewId = view ? view.id : null;

		if (viewNavigationLabel && view) {
			if (viewName && viewName.indexOf('"')!=-1) {
				viewName = viewName.replace(/"/g, "");
			}

			if (self.showViewName) {
				viewNavigationLabel.textContent = viewName;
				self.setTooltip(viewNavigationLabel, viewIndex + 1 + " of " + self.numberOfViews);
			}
			else {
				viewNavigationLabel.textContent = viewIndex + 1 + " of " + self.numberOfViews;
				self.setTooltip(viewNavigationLabel, viewName);
			}

		}
	}

	self.updateURL = function(view) {
		view = view == null ? self.getVisibleView() : view;
		var viewId = view ? view.id : null
		var viewFragment = view ? "#"+ viewId : null;

		if (viewId && self.viewIds.length>1 && self.enableDeepLinking) {

			if (self.supportsPopState==false) {
				self.setFragment(viewId);
			}
			else {
				if (viewFragment!=window.location.hash) {

					if (window.location.hash==null) {
						window.history.replaceState({name:viewId}, null, viewFragment);
					}
					else {
						window.history.pushState({name:viewId}, null, viewFragment);
					}
				}
			}
		}
	}

	self.updateURLState = function(view, stateName) {
		stateName = view && (stateName=="" || stateName==null) ? self.getStateNameByViewId(view.id) : stateName;

		if (self.supportsPopState==false) {
			self.setFragment(stateName);
		}
		else {
			if (stateName!=window.location.hash) {

				if (window.location.hash==null) {
					window.history.replaceState({name:view.viewId}, null, stateName);
				}
				else {
					window.history.pushState({name:view.viewId}, null, stateName);
				}
			}
		}
	}

	self.setFragment = function(value) {
		window.location.hash = "#" + value;
	}

	self.setTooltip = function(element, value) {
		// setting the tooltip in edge causes a page crash on hover
		if (/Edge/.test(navigator.userAgent)) { return; }

		if ("title" in element) {
			element.title = value;
		}
	}

	self.getStylesheetRules = function(styleSheet) {
		try {
			if (styleSheet) return styleSheet.cssRules || styleSheet.rules;
	
			return document.styleSheets[0]["cssRules"] || document.styleSheets[0]["rules"];
		}
		catch (error) {
			// ERRORS:
			// SecurityError: The operation is insecure.
			// Errors happen when script loads before stylesheet or loading an external css locally

			// InvalidAccessError: A parameter or an operation is not supported by the underlying object
			// Place script after stylesheet

			console.log(error);
			if (error.toString().indexOf("The operation is insecure")!=-1) {
				console.log("Load the stylesheet before the script or load the stylesheet inline until it can be loaded on a server")
			}
			return [];
		}
	}

	/**
	 * If single page application hide all of the views. 
	 * @param {Number} selectedIndex if provided shows the view at index provided
	 **/
	self.hideViews = function(selectedIndex, animation) {
		var rules = self.getStylesheetRules();
		var queryIndex = 0;
		var numberOfRules = rules!=null ? rules.length : 0;

		// loop through rules and hide media queries except selected
		for (var i=0;i<numberOfRules;i++) {
			var rule = rules[i];

			if (rule.media!=null) {

				if (queryIndex==selectedIndex) {
					self.currentQuery.mediaText = rule.conditionText;
					self.currentQuery.index = selectedIndex;
					self.currentQuery.rule = rule;
					self.enableMediaQuery(rule);
				}
				else {
					if (animation) {
						self.fadeOut(rule)
					}
					else {
						self.disableMediaQuery(rule);
					}
				}
				
				queryIndex++;
			}
		}

		self.numberOfViews = queryIndex;
		self.updateViewLabel();
		self.updateURL();

		self.dispatchViewChange();

		var view = self.getVisibleView();
		var viewIndex = view ? self.getViewIndex(view) : -1;

		return viewIndex==selectedIndex ? view : null;
	}

	/**
	 * Hide view
	 * @param {Object} view element to hide
	 **/
	self.hideView = function(view) {
		var rule = view ? self.mediaQueryDictionary[view.id] : null;

		if (rule) {
			self.disableMediaQuery(rule);
		}
	}

	/**
	 * Hide overlay
	 * @param {Object} overlay element to hide
	 **/
	self.hideOverlay = function(overlay) {
		var rule = overlay ? self.mediaQueryDictionary[overlay.id] : null;

		if (rule) {
			self.disableMediaQuery(rule);

			//if (self.showByMediaQuery) {
				overlay.style.display = "none";
			//}
		}
	}

	/**
	 * Show the view by media query. Does not hide current views
	 * Sets view options by default
	 * @param {Object} view element to show
	 * @param {Boolean} setViewOptions sets view options if null or true
	 */
	self.showViewByMediaQuery = function(view, setViewOptions) {
		var id = view ? view.id : null;
		var query = id ? self.mediaQueryDictionary[id] : null;
		var isOverlay = view ? self.isOverlay(view) : false;
		setViewOptions = setViewOptions==null ? true : setViewOptions;

		if (query) {
			self.enableMediaQuery(query);

			if (isOverlay && view && setViewOptions) {
				self.setViewVariables(null, view);
			}
			else {
				if (view && setViewOptions) self.setViewOptions(view);
				if (view && setViewOptions) self.setViewVariables(view);
			}
		}
	}

	/**
	 * Show the view. Does not hide current views
	 */
	self.showView = function(view, setViewOptions) {
		var id = view ? view.id : null;
		var query = id ? self.mediaQueryDictionary[id] : null;
		var display = null;
		setViewOptions = setViewOptions==null ? true : setViewOptions;

		if (query) {
			self.enableMediaQuery(query);
			if (view==null) view =self.getVisibleView();
			if (view && setViewOptions) self.setViewOptions(view);
		}
		else if (id) {
			display = window.getComputedStyle(view).getPropertyValue("display");
			if (display=="" || display=="none") {
				view.style.display = "block";
			}
		}

		if (view) {
			if (self.currentView!=null) {
				self.lastView = self.currentView;
			}

			self.currentView = view;
		}
	}

	self.showViewById = function(id, setViewOptions) {
		var view = id ? self.getViewById(id) : null;

		if (view) {
			self.showView(view);
			return;
		}

		self.log("View not found '" + id + "'");
	}

	self.getElementView = function(element) {
		var view = element;
		var viewFound = false;

		while (viewFound==false || view==null) {
			if (view && self.viewsDictionary[view.id]) {
				return view;
			}
			view = view.parentNode;
		}
	}

	/**
	 * Show overlay over view
	 * @param {Event | HTMLElement} event event or html element with styles applied
	 * @param {String} id id of view or view reference
	 * @param {Number} x x location
	 * @param {Number} y y location
	 */
	self.showOverlay = function(event, id, x, y) {
		var overlay = id && typeof id === 'string' ? self.getViewById(id) : id ? id : null;
		var query = overlay ? self.mediaQueryDictionary[overlay.id] : null;
		var centerHorizontally = false;
		var centerVertically = false;
		var anchorLeft = false;
		var anchorTop = false;
		var anchorRight = false;
		var anchorBottom = false;
		var display = null;
		var reparent = true;
		var view = null;
		
		if (overlay==null || overlay==false) {
			self.log("Overlay not found, '"+ id + "'");
			return;
		}

		// get enter animation - event target must have css variables declared
		if (event) {
			var button = event.currentTarget || event; // can be event or htmlelement
			var buttonComputedStyles = getComputedStyle(button);
			var actionTargetValue = buttonComputedStyles.getPropertyValue(self.prefix+"action-target").trim();
			var animation = buttonComputedStyles.getPropertyValue(self.prefix+"animation").trim();
			var isAnimated = animation!="";
			var targetType = buttonComputedStyles.getPropertyValue(self.prefix+"action-type").trim();
			var actionTarget = self.application ? null : self.getElement(actionTargetValue);
			var actionTargetStyles = actionTarget ? actionTarget.style : null;

			if (actionTargetStyles) {
				actionTargetStyles.setProperty("animation", animation);
			}

			if ("stopImmediatePropagation" in event) {
				event.stopImmediatePropagation();
			}
		}
		
		if (self.application==false || targetType=="page") {
			document.location.href = "./" + actionTargetValue;
			return;
		}

		// remove any current overlays
		if (self.currentOverlay) {

			// act as switch if same button
			if (self.currentOverlay==actionTarget || self.currentOverlay==null) {
				if (self.lastTrigger==button) {
					self.removeOverlay(isAnimated);
					return;
				}
			}
			else {
				self.removeOverlay(isAnimated);
			}
		}

		if (reparent) {
			view = self.getElementView(button);
			if (view) {
				view.appendChild(overlay);
			}
		}

		if (query) {
			//self.setElementAnimation(overlay, null);
			//overlay.style.animation = animation;
			self.enableMediaQuery(query);
			
			var display = overlay && overlay.style.display;
			
			if (overlay && display=="" || display=="none") {
				overlay.style.display = "block";
				//self.setViewOptions(overlay);
			}

			// add animation defined in event target style declaration
			if (animation && self.supportAnimations) {
				self.fadeIn(overlay, false, animation);
			}
		}
		else if (id) {

			display = window.getComputedStyle(overlay).getPropertyValue("display");

			if (display=="" || display=="none") {
				overlay.style.display = "block";
			}

			// add animation defined in event target style declaration
			if (animation && self.supportAnimations) {
				self.fadeIn(overlay, false, animation);
			}
		}

		// do not set x or y position if centering
		var horizontal = self.prefix + "center-horizontally";
		var vertical = self.prefix + "center-vertically";
		var style = overlay.style;
		var transform = [];

		centerHorizontally = self.getIsStyleDefined(id, horizontal) ? self.getViewPreferenceBoolean(overlay, horizontal) : false;
		centerVertically = self.getIsStyleDefined(id, vertical) ? self.getViewPreferenceBoolean(overlay, vertical) : false;
		anchorLeft = self.getIsStyleDefined(id, "left");
		anchorRight = self.getIsStyleDefined(id, "right");
		anchorTop = self.getIsStyleDefined(id, "top");
		anchorBottom = self.getIsStyleDefined(id, "bottom");

		
		if (self.viewsDictionary[overlay.id] && self.viewsDictionary[overlay.id].styleDeclaration) {
			style = self.viewsDictionary[overlay.id].styleDeclaration.style;
		}
		
		if (centerHorizontally) {
			style.left = "50%";
			style.transformOrigin = "0 0";
			transform.push("translateX(-50%)");
		}
		else if (anchorRight && anchorLeft) {
			style.left = x + "px";
		}
		else if (anchorRight) {
			//style.right = x + "px";
		}
		else {
			style.left = x + "px";
		}
		
		if (centerVertically) {
			style.top = "50%";
			transform.push("translateY(-50%)");
			style.transformOrigin = "0 0";
		}
		else if (anchorTop && anchorBottom) {
			style.top = y + "px";
		}
		else if (anchorBottom) {
			//style.bottom = y + "px";
		}
		else {
			style.top = y + "px";
		}

		if (transform.length) {
			style.transform = transform.join(" ");
		}

		self.currentOverlay = overlay;
		self.lastTrigger = button;
	}

	self.goBack = function() {
		if (self.currentOverlay) {
			self.removeOverlay();
		}
		else if (self.lastView) {
			self.goToView(self.lastView.id);
		}
	}

	self.removeOverlay = function(animate) {
		var overlay = self.currentOverlay;
		animate = animate===false ? false : true;

		if (overlay) {
			var style = overlay.style;
			
			if (style.animation && self.supportAnimations && animate) {
				self.reverseAnimation(overlay, true);

				var duration = self.getAnimationDuration(style.animation, true);
		
				setTimeout(function() {
					self.setElementAnimation(overlay, null);
					self.hideOverlay(overlay);
					self.currentOverlay = null;
				}, duration);
			}
			else {
				self.setElementAnimation(overlay, null);
				self.hideOverlay(overlay);
				self.currentOverlay = null;
			}
		}
	}

	/**
	 * Reverse the animation and hide after
	 * @param {Object} target element with animation
	 * @param {Boolean} hide hide after animation ends
	 */
	self.reverseAnimation = function(target, hide) {
		var lastAnimation = null;
		var style = target.style;

		style.animationPlayState = "paused";
		lastAnimation = style.animation;
		style.animation = null;
		style.animationPlayState = "paused";

		if (hide) {
			//target.addEventListener("animationend", self.animationEndHideHandler);
	
			var duration = self.getAnimationDuration(lastAnimation, true);
			var isOverlay = self.isOverlay(target);
	
			setTimeout(function() {
				self.setElementAnimation(target, null);

				if (isOverlay) {
					self.hideOverlay(target);
				}
				else {
					self.hideView(target);
				}
			}, duration);
		}

		setTimeout(function() {
			style.animation = lastAnimation;
			style.animationPlayState = "paused";
			style.animationDirection = "reverse";
			style.animationPlayState = "running";
		}, 30);
	}

	self.animationEndHandler = function(event) {
		var target = event.currentTarget;
		self.dispatchEvent(new Event(event.type));
	}

	self.isOverlay = function(view) {
		var result = view ? self.getViewPreferenceBoolean(view, self.prefix + "is-overlay") : false;

		return result;
	}

	self.animationEndHideHandler = function(event) {
		var target = event.currentTarget;
		self.setViewVariables(null, target);
		self.hideView(target);
		target.removeEventListener("animationend", self.animationEndHideHandler);
	}

	self.animationEndShowHandler = function(event) {
		var target = event.currentTarget;
		target.removeEventListener("animationend", self.animationEndShowHandler);
	}

	self.setViewOptions = function(view) {

		if (view) {
			self.minimumScale = self.getViewPreferenceValue(view, self.prefix + "minimum-scale");
			self.maximumScale = self.getViewPreferenceValue(view, self.prefix + "maximum-scale");
			self.scaleViewsToFit = self.getViewPreferenceBoolean(view, self.prefix + "scale-to-fit");
			self.scaleToFitType = self.getViewPreferenceValue(view, self.prefix + "scale-to-fit-type");
			self.scaleToFitOnDoubleClick = self.getViewPreferenceBoolean(view, self.prefix + "scale-on-double-click");
			self.actualSizeOnDoubleClick = self.getViewPreferenceBoolean(view, self.prefix + "actual-size-on-double-click");
			self.scaleViewsOnResize = self.getViewPreferenceBoolean(view, self.prefix + "scale-on-resize");
			self.enableScaleUp = self.getViewPreferenceBoolean(view, self.prefix + "enable-scale-up");
			self.centerHorizontally = self.getViewPreferenceBoolean(view, self.prefix + "center-horizontally");
			self.centerVertically = self.getViewPreferenceBoolean(view, self.prefix + "center-vertically");
			self.navigationOnKeypress = self.getViewPreferenceBoolean(view, self.prefix + "navigate-on-keypress");
			self.showViewName = self.getViewPreferenceBoolean(view, self.prefix + "show-view-name");
			self.refreshPageForChanges = self.getViewPreferenceBoolean(view, self.prefix + "refresh-for-changes");
			self.refreshPageForChangesInterval = self.getViewPreferenceValue(view, self.prefix + "refresh-interval");
			self.showNavigationControls = self.getViewPreferenceBoolean(view, self.prefix + "show-navigation-controls");
			self.scaleViewSlider = self.getViewPreferenceBoolean(view, self.prefix + "show-scale-controls");
			self.enableDeepLinking = self.getViewPreferenceBoolean(view, self.prefix + "enable-deep-linking");
			self.singlePageApplication = self.getViewPreferenceBoolean(view, self.prefix + "application");
			self.showByMediaQuery = self.getViewPreferenceBoolean(view, self.prefix + "show-by-media-query");
			self.showUpdateNotification = document.cookie!="" ? document.cookie.indexOf(self.pageRefreshedName)!=-1 : false;
			self.imageComparisonDuration = self.getViewPreferenceValue(view, self.prefix + "image-comparison-duration");
			self.supportAnimations = self.getViewPreferenceBoolean(view, self.prefix + "enable-animations", true);

			if (self.scaleViewsToFit) {
				var newScaleValue = self.scaleViewToFit(view);
				
				if (newScaleValue<0) {
					setTimeout(self.scaleViewToFit, 500, view);
				}
			}
			else {
				self.viewScale = self.getViewScaleValue(view);
				self.viewToFitWidthScale = self.getViewFitToViewportWidthScale(view, self.enableScaleUp)
				self.viewToFitHeightScale = self.getViewFitToViewportScale(view, self.enableScaleUp);
				self.updateSliderValue(self.viewScale);
			}

			if (self.imageComparisonDuration!=null) {
				// todo
			}

			if (self.refreshPageForChangesInterval!=null) {
				self.refreshDuration = Number(self.refreshPageForChangesInterval);
			}
		}
	}

	self.previousView = function(event) {
		var rules = self.getStylesheetRules();
		var view = self.getVisibleView()
		var index = view ? self.getViewIndex(view) : -1;
		var prevQueryIndex = index!=-1 ? index-1 : self.currentQuery.index-1;
		var queryIndex = 0;
		var numberOfRules = rules!=null ? rules.length : 0;

		if (event) {
			event.stopImmediatePropagation();
		}

		if (prevQueryIndex<0) {
			return;
		}

		// loop through rules and hide media queries except selected
		for (var i=0;i<numberOfRules;i++) {
			var rule = rules[i];
			
			if (rule.media!=null) {

				if (queryIndex==prevQueryIndex) {
					self.currentQuery.mediaText = rule.conditionText;
					self.currentQuery.index = prevQueryIndex;
					self.currentQuery.rule = rule;
					self.enableMediaQuery(rule);
					self.updateViewLabel();
					self.updateURL();
					self.dispatchViewChange();
				}
				else {
					self.disableMediaQuery(rule);
				}

				queryIndex++;
			}
		}
	}

	self.nextView = function(event) {
		var rules = self.getStylesheetRules();
		var view = self.getVisibleView();
		var index = view ? self.getViewIndex(view) : -1;
		var nextQueryIndex = index!=-1 ? index+1 : self.currentQuery.index+1;
		var queryIndex = 0;
		var numberOfRules = rules!=null ? rules.length : 0;
		var numberOfMediaQueries = self.getNumberOfMediaRules();

		if (event) {
			event.stopImmediatePropagation();
		}

		if (nextQueryIndex>=numberOfMediaQueries) {
			return;
		}

		// loop through rules and hide media queries except selected
		for (var i=0;i<numberOfRules;i++) {
			var rule = rules[i];
			
			if (rule.media!=null) {

				if (queryIndex==nextQueryIndex) {
					self.currentQuery.mediaText = rule.conditionText;
					self.currentQuery.index = nextQueryIndex;
					self.currentQuery.rule = rule;
					self.enableMediaQuery(rule);
					self.updateViewLabel();
					self.updateURL();
					self.dispatchViewChange();
				}
				else {
					self.disableMediaQuery(rule);
				}

				queryIndex++;
			}
		}
	}

	/**
	 * Enables a view via media query
	 */
	self.enableMediaQuery = function(rule) {

		try {
			rule.media.mediaText = self.inclusionQuery;
		}
		catch(error) {
			//self.log(error);
			rule.conditionText = self.inclusionQuery;
		}
	}

	self.disableMediaQuery = function(rule) {

		try {
			rule.media.mediaText = self.exclusionQuery;
		}
		catch(error) {
			rule.conditionText = self.exclusionQuery;
		}
	}

	self.dispatchViewChange = function() {
		try {
			var event = new Event(self.NAVIGATION_CHANGE);
			window.dispatchEvent(event);
		}
		catch (error) {
			// In IE 11: Object doesn't support this action
		}
	}

	self.getNumberOfMediaRules = function() {
		var rules = self.getStylesheetRules();
		var numberOfRules = rules ? rules.length : 0;
		var numberOfQueries = 0;

		for (var i=0;i<numberOfRules;i++) {
			if (rules[i].media!=null) { numberOfQueries++; }
		}
		
		return numberOfQueries;
	}

	/////////////////////////////////////////
	// VIEW SCALE 
	/////////////////////////////////////////

	self.sliderChangeHandler = function(event) {
		var value = self.getShortNumber(event.currentTarget.value/100);
		var view = self.getVisibleView();
		self.setViewScaleValue(view, false, value, true);
	}

	self.updateSliderValue = function(scale) {
		var slider = document.getElementById(self.viewScaleSliderId);
		var tooltip = parseInt(scale * 100 + "") + "%";
		var inputType;
		var inputValue;
		
		if (slider) {
			inputValue = self.getShortNumber(scale * 100);
			if (inputValue!=slider["value"]) {
				slider["value"] = inputValue;
			}
			inputType = slider.getAttributeNS(null, "type");

			if (inputType!="range") {
				// input range is not supported
				slider.style.display = "none";
			}

			self.setTooltip(slider, tooltip);
		}
	}

	self.viewChangeHandler = function(event) {
		var view = self.getVisibleView();
		var matrix = view ? getComputedStyle(view).transform : null;
		
		if (matrix) {
			self.viewScale = self.getViewScaleValue(view);
			
			var scaleNeededToFit = self.getViewFitToViewportScale(view);
			var isViewLargerThanViewport = scaleNeededToFit<1;
			
			// scale large view to fit if scale to fit is enabled
			if (self.scaleViewsToFit) {
				self.scaleViewToFit(view);
			}
			else {
				self.updateSliderValue(self.viewScale);
			}
		}
	}

	self.getViewScaleValue = function(view) {
		var matrix = getComputedStyle(view).transform;

		if (matrix) {
			var matrixArray = matrix.replace("matrix(", "").split(",");
			var scaleX = parseFloat(matrixArray[0]);
			var scaleY = parseFloat(matrixArray[3]);
			var scale = Math.min(scaleX, scaleY);
		}

		return scale;
	}

	/**
	 * Scales view to scale. 
	 * @param {Object} view view to scale. views are in views array
	 * @param {Boolean} scaleToFit set to true to scale to fit. set false to use desired scale value
	 * @param {Number} desiredScale scale to define. not used if scale to fit is false
	 * @param {Boolean} isSliderChange indicates if slider is callee
	 */
	self.setViewScaleValue = function(view, scaleToFit, desiredScale, isSliderChange) {
		var enableScaleUp = self.enableScaleUp;
		var scaleToFitType = self.scaleToFitType;
		var minimumScale = self.minimumScale;
		var maximumScale = self.maximumScale;
		var hasMinimumScale = !isNaN(minimumScale) && minimumScale!="";
		var hasMaximumScale = !isNaN(maximumScale) && maximumScale!="";
		var scaleNeededToFit = self.getViewFitToViewportScale(view, enableScaleUp);
		var scaleNeededToFitWidth = self.getViewFitToViewportWidthScale(view, enableScaleUp);
		var scaleNeededToFitHeight = self.getViewFitToViewportHeightScale(view, enableScaleUp);
		var scaleToFitFull = self.getViewFitToViewportScale(view, true);
		var scaleToFitFullWidth = self.getViewFitToViewportWidthScale(view, true);
		var scaleToFitFullHeight = self.getViewFitToViewportHeightScale(view, true);
		var scaleToWidth = scaleToFitType=="width";
		var scaleToHeight = scaleToFitType=="height";
		var shrunkToFit = false;
		var topPosition = null;
		var leftPosition = null;
		var translateY = null;
		var translateX = null;
		var transformValue = "";
		var canCenterVertically = true;
		var canCenterHorizontally = true;
		var style = view.style;

		if (view && self.viewsDictionary[view.id] && self.viewsDictionary[view.id].styleDeclaration) {
			style = self.viewsDictionary[view.id].styleDeclaration.style;
		}

		if (scaleToFit && isSliderChange!=true) {
			if (scaleToFitType=="fit" || scaleToFitType=="") {
				desiredScale = scaleNeededToFit;
			}
			else if (scaleToFitType=="width") {
				desiredScale = scaleNeededToFitWidth;
			}
			else if (scaleToFitType=="height") {
				desiredScale = scaleNeededToFitHeight;
			}
		}
		else {
			if (isNaN(desiredScale)) {
				desiredScale = 1;
			}
		}

		self.updateSliderValue(desiredScale);
		
		// scale to fit width
		if (scaleToWidth && scaleToHeight==false) {
			canCenterVertically = scaleNeededToFitHeight>=scaleNeededToFitWidth;
			canCenterHorizontally = scaleNeededToFitWidth>=1 && enableScaleUp==false;

			if (isSliderChange) {
				canCenterHorizontally = desiredScale<scaleToFitFullWidth;
			}
			else if (scaleToFit) {
				desiredScale = scaleNeededToFitWidth;
			}

			if (hasMinimumScale) {
				desiredScale = Math.max(desiredScale, Number(minimumScale));
			}

			if (hasMaximumScale) {
				desiredScale = Math.min(desiredScale, Number(maximumScale));
			}

			desiredScale = self.getShortNumber(desiredScale);

			canCenterHorizontally = self.canCenterHorizontally(view, "width", enableScaleUp, desiredScale, minimumScale, maximumScale);
			canCenterVertically = self.canCenterVertically(view, "width", enableScaleUp, desiredScale, minimumScale, maximumScale);

			if (desiredScale>1 && (enableScaleUp || isSliderChange)) {
				transformValue = "scale(" + desiredScale + ")";
			}
			else if (desiredScale>=1 && enableScaleUp==false) {
				transformValue = "scale(" + 1 + ")";
			}
			else {
				transformValue = "scale(" + desiredScale + ")";
			}

			if (self.centerVertically) {
				if (canCenterVertically) {
					translateY = "-50%";
					topPosition = "50%";
				}
				else {
					translateY = "0";
					topPosition = "0";
				}
				
				if (style.top != topPosition) {
					style.top = topPosition + "";
				}

				if (canCenterVertically) {
					transformValue += " translateY(" + translateY+ ")";
				}
			}

			if (self.centerHorizontally) {
				if (canCenterHorizontally) {
					translateX = "-50%";
					leftPosition = "50%";
				}
				else {
					translateX = "0";
					leftPosition = "0";
				}

				if (style.left != leftPosition) {
					style.left = leftPosition + "";
				}

				if (canCenterHorizontally) {
					transformValue += " translateX(" + translateX+ ")";
				}
			}

			style.transformOrigin = "0 0";
			style.transform = transformValue;

			self.viewScale = desiredScale;
			self.viewToFitWidthScale = scaleNeededToFitWidth;
			self.viewToFitHeightScale = scaleNeededToFitHeight;
			self.viewLeft = leftPosition;
			self.viewTop = topPosition;

			return desiredScale;
		}

		// scale to fit height
		if (scaleToHeight && scaleToWidth==false) {
			//canCenterVertically = scaleNeededToFitHeight>=scaleNeededToFitWidth;
			//canCenterHorizontally = scaleNeededToFitHeight<=scaleNeededToFitWidth && enableScaleUp==false;
			canCenterVertically = scaleNeededToFitHeight>=scaleNeededToFitWidth;
			canCenterHorizontally = scaleNeededToFitWidth>=1 && enableScaleUp==false;
			
			if (isSliderChange) {
				canCenterHorizontally = desiredScale<scaleToFitFullHeight;
			}
			else if (scaleToFit) {
				desiredScale = scaleNeededToFitHeight;
			}

			if (hasMinimumScale) {
				desiredScale = Math.max(desiredScale, Number(minimumScale));
			}

			if (hasMaximumScale) {
				desiredScale = Math.min(desiredScale, Number(maximumScale));
				//canCenterVertically = desiredScale>=scaleNeededToFitHeight && enableScaleUp==false;
			}

			desiredScale = self.getShortNumber(desiredScale);

			canCenterHorizontally = self.canCenterHorizontally(view, "height", enableScaleUp, desiredScale, minimumScale, maximumScale);
			canCenterVertically = self.canCenterVertically(view, "height", enableScaleUp, desiredScale, minimumScale, maximumScale);

			if (desiredScale>1 && (enableScaleUp || isSliderChange)) {
				transformValue = "scale(" + desiredScale + ")";
			}
			else if (desiredScale>=1 && enableScaleUp==false) {
				transformValue = "scale(" + 1 + ")";
			}
			else {
				transformValue = "scale(" + desiredScale + ")";
			}

			if (self.centerHorizontally) {
				if (canCenterHorizontally) {
					translateX = "-50%";
					leftPosition = "50%";
				}
				else {
					translateX = "0";
					leftPosition = "0";
				}

				if (style.left != leftPosition) {
					style.left = leftPosition + "";
				}

				if (canCenterHorizontally) {
					transformValue += " translateX(" + translateX+ ")";
				}
			}

			if (self.centerVertically) {
				if (canCenterVertically) {
					translateY = "-50%";
					topPosition = "50%";
				}
				else {
					translateY = "0";
					topPosition = "0";
				}
				
				if (style.top != topPosition) {
					style.top = topPosition + "";
				}

				if (canCenterVertically) {
					transformValue += " translateY(" + translateY+ ")";
				}
			}

			style.transformOrigin = "0 0";
			style.transform = transformValue;

			self.viewScale = desiredScale;
			self.viewToFitWidthScale = scaleNeededToFitWidth;
			self.viewToFitHeightScale = scaleNeededToFitHeight;
			self.viewLeft = leftPosition;
			self.viewTop = topPosition;

			return scaleNeededToFitHeight;
		}

		if (scaleToFitType=="fit") {
			//canCenterVertically = scaleNeededToFitHeight>=scaleNeededToFitWidth;
			//canCenterHorizontally = scaleNeededToFitWidth>=scaleNeededToFitHeight;
			canCenterVertically = scaleNeededToFitHeight>=scaleNeededToFit;
			canCenterHorizontally = scaleNeededToFitWidth>=scaleNeededToFit;

			if (hasMinimumScale) {
				desiredScale = Math.max(desiredScale, Number(minimumScale));
			}

			desiredScale = self.getShortNumber(desiredScale);

			if (isSliderChange || scaleToFit==false) {
				canCenterVertically = scaleToFitFullHeight>=desiredScale;
				canCenterHorizontally = desiredScale<scaleToFitFullWidth;
			}
			else if (scaleToFit) {
				desiredScale = scaleNeededToFit;
			}

			transformValue = "scale(" + desiredScale + ")";

			//canCenterHorizontally = self.canCenterHorizontally(view, "fit", false, desiredScale);
			//canCenterVertically = self.canCenterVertically(view, "fit", false, desiredScale);
			
			if (self.centerVertically) {
				if (canCenterVertically) {
					translateY = "-50%";
					topPosition = "50%";
				}
				else {
					translateY = "0";
					topPosition = "0";
				}
				
				if (style.top != topPosition) {
					style.top = topPosition + "";
				}

				if (canCenterVertically) {
					transformValue += " translateY(" + translateY+ ")";
				}
			}

			if (self.centerHorizontally) {
				if (canCenterHorizontally) {
					translateX = "-50%";
					leftPosition = "50%";
				}
				else {
					translateX = "0";
					leftPosition = "0";
				}

				if (style.left != leftPosition) {
					style.left = leftPosition + "";
				}

				if (canCenterHorizontally) {
					transformValue += " translateX(" + translateX+ ")";
				}
			}

			style.transformOrigin = "0 0";
			style.transform = transformValue;

			self.viewScale = desiredScale;
			self.viewToFitWidthScale = scaleNeededToFitWidth;
			self.viewToFitHeightScale = scaleNeededToFitHeight;
			self.viewLeft = leftPosition;
			self.viewTop = topPosition;

			self.updateSliderValue(desiredScale);
			
			return desiredScale;
		}

		if (scaleToFitType=="default" || scaleToFitType=="") {
			desiredScale = 1;

			if (hasMinimumScale) {
				desiredScale = Math.max(desiredScale, Number(minimumScale));
			}
			if (hasMaximumScale) {
				desiredScale = Math.min(desiredScale, Number(maximumScale));
			}

			canCenterHorizontally = self.canCenterHorizontally(view, "none", false, desiredScale, minimumScale, maximumScale);
			canCenterVertically = self.canCenterVertically(view, "none", false, desiredScale, minimumScale, maximumScale);

			if (self.centerVertically) {
				if (canCenterVertically) {
					translateY = "-50%";
					topPosition = "50%";
				}
				else {
					translateY = "0";
					topPosition = "0";
				}
				
				if (style.top != topPosition) {
					style.top = topPosition + "";
				}

				if (canCenterVertically) {
					transformValue += " translateY(" + translateY+ ")";
				}
			}

			if (self.centerHorizontally) {
				if (canCenterHorizontally) {
					translateX = "-50%";
					leftPosition = "50%";
				}
				else {
					translateX = "0";
					leftPosition = "0";
				}

				if (style.left != leftPosition) {
					style.left = leftPosition + "";
				}

				if (canCenterHorizontally) {
					transformValue += " translateX(" + translateX+ ")";
				}
				else {
					transformValue += " translateX(" + 0 + ")";
				}
			}

			style.transformOrigin = "0 0";
			style.transform = transformValue;


			self.viewScale = desiredScale;
			self.viewToFitWidthScale = scaleNeededToFitWidth;
			self.viewToFitHeightScale = scaleNeededToFitHeight;
			self.viewLeft = leftPosition;
			self.viewTop = topPosition;

			self.updateSliderValue(desiredScale);
			
			return desiredScale;
		}
	}

	/**
	 * Returns true if view can be centered horizontally
	 * @param {HTMLElement} view view
	 * @param {String} type type of scaling - width, height, all, none
	 * @param {Boolean} scaleUp if scale up enabled 
	 * @param {Number} scale target scale value 
	 */
	self.canCenterHorizontally = function(view, type, scaleUp, scale, minimumScale, maximumScale) {
		var scaleNeededToFit = self.getViewFitToViewportScale(view, scaleUp);
		var scaleNeededToFitHeight = self.getViewFitToViewportHeightScale(view, scaleUp);
		var scaleNeededToFitWidth = self.getViewFitToViewportWidthScale(view, scaleUp);
		var canCenter = false;
		var minScale;

		type = type==null ? "none" : type;
		scale = scale==null ? scale : scaleNeededToFitWidth;
		scaleUp = scaleUp == null ? false : scaleUp;

		if (type=="width") {
	
			if (scaleUp && maximumScale==null) {
				canCenter = false;
			}
			else if (scaleNeededToFitWidth>=1) {
				canCenter = true;
			}
		}
		else if (type=="height") {
			minScale = Math.min(1, scaleNeededToFitHeight);
			if (minimumScale!="" && maximumScale!="") {
				minScale = Math.max(minimumScale, Math.min(maximumScale, scaleNeededToFitHeight));
			}
			else {
				if (minimumScale!="") {
					minScale = Math.max(minimumScale, scaleNeededToFitHeight);
				}
				if (maximumScale!="") {
					minScale = Math.max(minimumScale, Math.min(maximumScale, scaleNeededToFitHeight));
				}
			}
	
			if (scaleUp && maximumScale=="") {
				canCenter = false;
			}
			else if (scaleNeededToFitWidth>=minScale) {
				canCenter = true;
			}
		}
		else if (type=="fit") {
			canCenter = scaleNeededToFitWidth>=scaleNeededToFit;
		}
		else {
			if (scaleUp) {
				canCenter = false;
			}
			else if (scaleNeededToFitWidth>=1) {
				canCenter = true;
			}
		}

		self.horizontalScrollbarsNeeded = canCenter;
		
		return canCenter;
	}

	/**
	 * Returns true if view can be centered horizontally
	 * @param {HTMLElement} view view to scale
	 * @param {String} type type of scaling
	 * @param {Boolean} scaleUp if scale up enabled 
	 * @param {Number} scale target scale value 
	 */
	self.canCenterVertically = function(view, type, scaleUp, scale, minimumScale, maximumScale) {
		var scaleNeededToFit = self.getViewFitToViewportScale(view, scaleUp);
		var scaleNeededToFitWidth = self.getViewFitToViewportWidthScale(view, scaleUp);
		var scaleNeededToFitHeight = self.getViewFitToViewportHeightScale(view, scaleUp);
		var canCenter = false;
		var minScale;

		type = type==null ? "none" : type;
		scale = scale==null ? 1 : scale;
		scaleUp = scaleUp == null ? false : scaleUp;
	
		if (type=="width") {
			canCenter = scaleNeededToFitHeight>=scaleNeededToFitWidth;
		}
		else if (type=="height") {
			minScale = Math.max(minimumScale, Math.min(maximumScale, scaleNeededToFit));
			canCenter = scaleNeededToFitHeight>=minScale;
		}
		else if (type=="fit") {
			canCenter = scaleNeededToFitHeight>=scaleNeededToFit;
		}
		else {
			if (scaleUp) {
				canCenter = false;
			}
			else if (scaleNeededToFitHeight>=1) {
				canCenter = true;
			}
		}

		self.verticalScrollbarsNeeded = canCenter;
		
		return canCenter;
	}

	self.getViewFitToViewportScale = function(view, scaleUp) {
		var enableScaleUp = scaleUp;
		var availableWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
		var availableHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
		var elementWidth = parseFloat(getComputedStyle(view, "style").width);
		var elementHeight = parseFloat(getComputedStyle(view, "style").height);
		var newScale = 1;

		// if element is not added to the document computed values are NaN
		if (isNaN(elementWidth) || isNaN(elementHeight)) {
			return newScale;
		}

		availableWidth -= self.horizontalPadding;
		availableHeight -= self.verticalPadding;

		if (enableScaleUp) {
			newScale = Math.min(availableHeight/elementHeight, availableWidth/elementWidth);
		}
		else if (elementWidth > availableWidth || elementHeight > availableHeight) {
			newScale = Math.min(availableHeight/elementHeight, availableWidth/elementWidth);
		}
		
		return newScale;
	}

	self.getViewFitToViewportWidthScale = function(view, scaleUp) {
		// need to get browser viewport width when element
		var isParentWindow = view && view.parentNode && view.parentNode===document.body;
		var enableScaleUp = scaleUp;
		var availableWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
		var elementWidth = parseFloat(getComputedStyle(view, "style").width);
		var newScale = 1;

		// if element is not added to the document computed values are NaN
		if (isNaN(elementWidth)) {
			return newScale;
		}

		availableWidth -= self.horizontalPadding;

		if (enableScaleUp) {
			newScale = availableWidth/elementWidth;
		}
		else if (elementWidth > availableWidth) {
			newScale = availableWidth/elementWidth;
		}
		
		return newScale;
	}

	self.getViewFitToViewportHeightScale = function(view, scaleUp) {
		var enableScaleUp = scaleUp;
		var availableHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
		var elementHeight = parseFloat(getComputedStyle(view, "style").height);
		var newScale = 1;

		// if element is not added to the document computed values are NaN
		if (isNaN(elementHeight)) {
			return newScale;
		}

		availableHeight -= self.verticalPadding;

		if (enableScaleUp) {
			newScale = availableHeight/elementHeight;
		}
		else if (elementHeight > availableHeight) {
			newScale = availableHeight/elementHeight;
		}
		
		return newScale;
	}

	self.keypressHandler = function(event) {
		var rightKey = 39;
		var leftKey = 37;
		
		// listen for both events 
		if (event.type=="keypress") {
			window.removeEventListener("keyup", self.keypressHandler);
		}
		else {
			window.removeEventListener("keypress", self.keypressHandler);
		}
		
		if (self.showNavigationControls) {
			if (self.navigationOnKeypress) {
				if (event.keyCode==rightKey) {
					self.nextView();
				}
				if (event.keyCode==leftKey) {
					self.previousView();
				}
			}
		}
		else if (self.navigationOnKeypress) {
			if (event.keyCode==rightKey) {
				self.nextView();
			}
			if (event.keyCode==leftKey) {
				self.previousView();
			}
		}
	}

	///////////////////////////////////
	// GENERAL FUNCTIONS
	///////////////////////////////////

	self.getViewById = function(id) {
		id = id ? id.replace("#", "") : "";
		var view = self.viewIds.indexOf(id)!=-1 && self.getElement(id);
		return view;
	}

	self.getViewIds = function() {
		var viewIds = self.getViewPreferenceValue(document.body, self.prefix + "view-ids");
		var viewId = null;

		viewIds = viewIds!=null && viewIds!="" ? viewIds.split(",") : [];

		if (viewIds.length==0) {
			viewId = self.getViewPreferenceValue(document.body, self.prefix + "view-id");
			viewIds = viewId ? [viewId] : [];
		}

		return viewIds;
	}

	self.getInitialViewId = function() {
		var viewId = self.getViewPreferenceValue(document.body, self.prefix + "view-id");
		return viewId;
	}

	self.getApplicationStylesheet = function() {
		var stylesheetId = self.getViewPreferenceValue(document.body, self.prefix + "stylesheet-id");
		self.applicationStylesheet = document.getElementById("applicationStylesheet");
		return self.applicationStylesheet.sheet;
	}

	self.getVisibleView = function() {
		var viewIds = self.getViewIds();
		
		for (var i=0;i<viewIds.length;i++) {
			var viewId = viewIds[i].replace(/[\#?\.?](.*)/, "$" + "1");
			var view = self.getElement(viewId);
			var postName = "_Class";

			if (view==null && viewId && viewId.lastIndexOf(postName)!=-1) {
				view = self.getElement(viewId.replace(postName, ""));
			}
			
			if (view) {
				var display = getComputedStyle(view).display;
		
				if (display=="block" || display=="flex") {
					return view;
				}
			}
		}

		return null;
	}

	self.getVisibleViews = function() {
		var viewIds = self.getViewIds();
		var views = [];
		
		for (var i=0;i<viewIds.length;i++) {
			var viewId = viewIds[i].replace(/[\#?\.?](.*)/, "$" + "1");
			var view = self.getElement(viewId);
			var postName = "_Class";

			if (view==null && viewId && viewId.lastIndexOf(postName)!=-1) {
				view = self.getElement(viewId.replace(postName, ""));
			}
			
			if (view) {
				var display = getComputedStyle(view).display;
				
				if (display=="none") {
					continue;
				}

				if (display=="block" || display=="flex") {
					views.push(view);
				}
			}
		}

		return views;
	}

	self.getStateNameByViewId = function(id) {
		var state = self.viewsDictionary[id];
		return state && state.stateName;
	}

	self.getMatchingViews = function(ids) {
		var views = self.addedViews.slice(0);
		var matchingViews = [];

		if (self.showByMediaQuery) {
			for (let index = 0; index < views.length; index++) {
				var viewId = views[index];
				var state = self.viewsDictionary[viewId];
				var rule = state && state.rule; 
				var matchResults = window.matchMedia(rule.conditionText);
				var view = self.views[viewId];
				
				if (matchResults.matches) {
					if (ids==true) {
						matchingViews.push(viewId);
					}
					else {
						matchingViews.push(view);
					}
				}
			}
		}

		return matchingViews;
	}

	self.ruleMatchesQuery = function(rule) {
		var result = window.matchMedia(rule.conditionText);
		return result.matches;
	}

	self.getViewsByStateName = function(stateName, matchQuery) {
		var views = self.addedViews.slice(0);
		var matchingViews = [];

		if (self.showByMediaQuery) {

			// find state name
			for (let index = 0; index < views.length; index++) {
				var viewId = views[index];
				var state = self.viewsDictionary[viewId];
				var rule = state.rule;
				var mediaRule = state.mediaRule;
				var view = self.views[viewId];
				var viewStateName = self.getStyleRuleValue(mediaRule, self.STATE_NAME, state);
				var stateFoundAtt = view.getAttribute(self.STATE_NAME)==state;
				var matchesResults = false;
				
				if (viewStateName==stateName) {
					if (matchQuery) {
						matchesResults = self.ruleMatchesQuery(rule);

						if (matchesResults) {
							matchingViews.push(view);
						}
					}
					else {
						matchingViews.push(view);
					}
				}
			}
		}

		return matchingViews;
	}

	self.getInitialView = function() {
		var viewId = self.getInitialViewId();
		viewId = viewId.replace(/[\#?\.?](.*)/, "$" + "1");
		var view = self.getElement(viewId);
		var postName = "_Class";

		if (view==null && viewId && viewId.lastIndexOf(postName)!=-1) {
			view = self.getElement(viewId.replace(postName, ""));
		}

		return view;
	}

	self.getViewIndex = function(view) {
		var viewIds = self.getViewIds();
		var id = view ? view.id : null;
		var index = id && viewIds ? viewIds.indexOf(id) : -1;

		return index;
	}

	self.syncronizeViewToURL = function() {
		var fragment = self.getHashFragment();

		if (self.showByMediaQuery) {
			var stateName = fragment;
			
			if (stateName==null || stateName=="") {
				var initialView = self.getInitialView();
				stateName = initialView ? self.getStateNameByViewId(initialView.id) : null;
			}
			
			self.showMediaQueryViewsByState(stateName);
			return;
		}

		var view = self.getViewById(fragment);
		var index = view ? self.getViewIndex(view) : 0;
		if (index==-1) index = 0;
		var currentView = self.hideViews(index);

		if (self.supportsPopState && currentView) {

			if (fragment==null) {
				window.history.replaceState({name:currentView.id}, null, "#"+ currentView.id);
			}
			else {
				window.history.pushState({name:currentView.id}, null, "#"+ currentView.id);
			}
		}
		
		self.setViewVariables(view);
		return view;
	}

	/**
	 * Set the currentView or currentOverlay properties and set the lastView or lastOverlay properties
	 */
	self.setViewVariables = function(view, overlay, parentView) {
		if (view) {
			if (self.currentView) {
				self.lastView = self.currentView;
			}
			self.currentView = view;
		}

		if (overlay) {
			if (self.currentOverlay) {
				self.lastOverlay = self.currentOverlay;
			}
			self.currentOverlay = overlay;
		}
	}

	self.getViewPreferenceBoolean = function(view, property, altValue) {
		var computedStyle = window.getComputedStyle(view);
		var value = computedStyle.getPropertyValue(property);
		var type = typeof value;
		
		if (value=="true" || (type=="string" && value.indexOf("true")!=-1)) {
			return true;
		}
		else if (value=="" && arguments.length==3) {
			return altValue;
		}

		return false;
	}

	self.getViewPreferenceValue = function(view, property, defaultValue) {
		var value = window.getComputedStyle(view).getPropertyValue(property);

		if (value===undefined) {
			return defaultValue;
		}
		
		value = value.replace(/^[\s\"]*/, "");
		value = value.replace(/[\s\"]*$/, "");
		value = value.replace(/^[\s"]*(.*?)[\s"]*$/, function (match, capture) { 
			return capture;
		});

		return value;
	}

	self.getStyleRuleValue = function(cssRule, property) {
		var value = cssRule ? cssRule.style.getPropertyValue(property) : null;

		if (value===undefined) {
			return null;
		}
		
		value = value.replace(/^[\s\"]*/, "");
		value = value.replace(/[\s\"]*$/, "");
		value = value.replace(/^[\s"]*(.*?)[\s"]*$/, function (match, capture) { 
			return capture;
		});

		return value;
	}

	/**
	 * Get the first defined value of property. Returns empty string if not defined
	 * @param {String} id id of element
	 * @param {String} property 
	 */
	self.getCSSPropertyValueForElement = function(id, property) {
		var styleSheets = document.styleSheets;
		var numOfStylesheets = styleSheets.length;
		var values = [];
		var selectorIDText = "#" + id;
		var selectorClassText = "." + id + "_Class";
		var value;

		for(var i=0;i<numOfStylesheets;i++) {
			var styleSheet = styleSheets[i];
			var cssRules = self.getStylesheetRules(styleSheet);
			var numOfCSSRules = cssRules.length;
			var cssRule;
			
			for (var j=0;j<numOfCSSRules;j++) {
				cssRule = cssRules[j];
				
				if (cssRule.media) {
					var mediaRules = cssRule.cssRules;
					var numOfMediaRules = mediaRules ? mediaRules.length : 0;
					
					for(var k=0;k<numOfMediaRules;k++) {
						var mediaRule = mediaRules[k];
						
						if (mediaRule.selectorText==selectorIDText || mediaRule.selectorText==selectorClassText) {
							
							if (mediaRule.style && mediaRule.style.getPropertyValue(property)!="") {
								value = mediaRule.style.getPropertyValue(property);
								values.push(value);
							}
						}
					}
				}
				else {

					if (cssRule.selectorText==selectorIDText || cssRule.selectorText==selectorClassText) {
						if (cssRule.style && cssRule.style.getPropertyValue(property)!="") {
							value = cssRule.style.getPropertyValue(property);
							values.push(value);
						}
					}
				}
			}
		}

		return values.pop();
	}

	self.getIsStyleDefined = function(id, property) {
		var value = self.getCSSPropertyValueForElement(id, property);
		return value!==undefined && value!="";
	}

	self.collectViews = function() {
		var viewIds = self.getViewIds();

		for (let index = 0; index < viewIds.length; index++) {
			const id = viewIds[index];
			const view = self.getElement(id);
			self.views[id] = view;
		}
		
		self.viewIds = viewIds;
	}

	self.collectOverlays = function() {
		var viewIds = self.getViewIds();
		var ids = [];

		for (let index = 0; index < viewIds.length; index++) {
			const id = viewIds[index];
			const view = self.getViewById(id);
			const isOverlay = view && self.isOverlay(view);
			
			if (isOverlay) {
				ids.push(id);
				self.overlays[id] = view;
			}
		}
		
		self.overlayIds = ids;
	}

	self.collectMediaQueries = function() {
		var viewIds = self.getViewIds();
		var styleSheet = self.getApplicationStylesheet();
		var cssRules = self.getStylesheetRules(styleSheet);
		var numOfCSSRules = cssRules ? cssRules.length : 0;
		var cssRule;
		var id = viewIds.length ? viewIds[0]: ""; // single view
		var selectorIDText = "#" + id;
		var selectorClassText = "." + id + "_Class";
		var viewsNotFound = viewIds.slice();
		var viewsFound = [];
		var selectorText = null;
		var property = self.prefix + "view-id";
		var stateName = self.prefix + "state";
		var stateValue;
		
		for (var j=0;j<numOfCSSRules;j++) {
			cssRule = cssRules[j];
			
			if (cssRule.media) {
				var mediaRules = cssRule.cssRules;
				var numOfMediaRules = mediaRules ? mediaRules.length : 0;
				var mediaViewInfoFound = false;
				var mediaId = null;
				
				for(var k=0;k<numOfMediaRules;k++) {
					var mediaRule = mediaRules[k];

					selectorText = mediaRule.selectorText;
					
					if (selectorText==".mediaViewInfo" && mediaViewInfoFound==false) {

						mediaId = self.getStyleRuleValue(mediaRule, property);
						stateValue = self.getStyleRuleValue(mediaRule, stateName);

						selectorIDText = "#" + mediaId;
						selectorClassText = "." + mediaId + "_Class";
						
						// prevent duplicates from load and domcontentloaded events
						if (self.addedViews.indexOf(mediaId)==-1) {
							self.addView(mediaId, cssRule, mediaRule, stateValue);
						}

						viewsFound.push(mediaId);

						if (viewsNotFound.indexOf(mediaId)!=-1) {
							viewsNotFound.splice(viewsNotFound.indexOf(mediaId));
						}

						mediaViewInfoFound = true;
					}

					if (selectorIDText==selectorText || selectorClassText==selectorText) {
						var styleObject = self.viewsDictionary[mediaId];
						if (styleObject) {
							styleObject.styleDeclaration = mediaRule;
						}
						break;
					}
				}
			}
			else {
				selectorText = cssRule.selectorText;
				
				if (selectorText==null) continue;

				selectorText = selectorText.replace(/[#|\s|*]?/g, "");

				if (viewIds.indexOf(selectorText)!=-1) {
					self.addView(selectorText, cssRule, null, stateValue);

					if (viewsNotFound.indexOf(selectorText)!=-1) {
						viewsNotFound.splice(viewsNotFound.indexOf(selectorText));
					}

					break;
				}
			}
		}

		if (viewsNotFound.length) {
			console.log("Could not find the following views:" + viewsNotFound.join(",") + "");
			console.log("Views found:" + viewsFound.join(",") + "");
		}
	}

	/**
	 * Adds a view. A view object contains the id of the view and the style rule
	 * Use enableMediaQuery(rule) to enable
	 * An array of view names are in self.addedViews array
	 */
	self.addView = function(viewId, cssRule, mediaRule, stateName) {
		var state = {name:viewId, rule:cssRule, id:viewId, mediaRule:mediaRule, stateName:stateName};
		self.addedViews.push(viewId);
		self.viewsDictionary[viewId] = state;
		self.mediaQueryDictionary[viewId] = cssRule;
	}

	self.hasView = function(name) {

		if (self.addedViews.indexOf(name)!=-1) {
			return true;
		}
		return false;
	}

	/**
	 * Go to view by id. Views are added in addView()
	 * @param {String} id id of view in current
	 * @param {Boolean} maintainPreviousState if true then do not hide other views
	 * @param {String} parent id of parent view
	 */
	self.goToView = function(id, maintainPreviousState, parent) {
		var state = self.viewsDictionary[id];

		if (state) {
			if (maintainPreviousState==false || maintainPreviousState==null) {
				self.hideViews();
			}
			self.enableMediaQuery(state.rule);
			self.updateViewLabel();
			self.updateURL();
		}
		else {
			var event = new Event(self.STATE_NOT_FOUND);
			self.stateName = id;
			window.dispatchEvent(event);
		}
	}

	/**
	 * Go to the view in the event targets CSS variable
	 */
	self.goToTargetView = function(event) {
		var button = event.currentTarget;
		var buttonComputedStyles = getComputedStyle(button);
		var actionTargetValue = buttonComputedStyles.getPropertyValue(self.prefix+"action-target").trim();
		var animation = buttonComputedStyles.getPropertyValue(self.prefix+"animation").trim();
		var targetType = buttonComputedStyles.getPropertyValue(self.prefix+"action-type").trim();
		var targetView = self.application ? null : self.getElement(actionTargetValue);
		var targetState = targetView ? self.getStateNameByViewId(targetView.id) : null;
		var actionTargetStyles = targetView ? targetView.style : null;
		var state = self.viewsDictionary[actionTargetValue];
		
		// navigate to page
		if (self.application==false || targetType=="page") {
			document.location.href = "./" + actionTargetValue;
			return;
		}

		// if view is found
		if (targetView) {

			if (self.currentOverlay) {
				self.removeOverlay(false);
			}

			if (self.showByMediaQuery) {
				var stateName = targetState;
				
				if (stateName==null || stateName=="") {
					var initialView = self.getInitialView();
					stateName = initialView ? self.getStateNameByViewId(initialView.id) : null;
				}
				self.showMediaQueryViewsByState(stateName, event);
				return;
			}

			// add animation set in event target style declaration
			if (animation && self.supportAnimations) {
				self.crossFade(self.currentView, targetView, false, animation);
			}
			else {
				self.setViewVariables(self.currentView);
				self.hideViews();
				self.enableMediaQuery(state.rule);
				self.scaleViewIfNeeded(targetView);
				self.centerView(targetView);
				self.updateViewLabel();
				self.updateURL();
			}
		}
		else {
			var stateEvent = new Event(self.STATE_NOT_FOUND);
			self.stateName = name;
			window.dispatchEvent(stateEvent);
		}

		event.stopImmediatePropagation();
	}

	/**
	 * Cross fade between views
	 **/
	self.crossFade = function(from, to, update, animation) {
		var targetIndex = to.parentNode
		var fromIndex = Array.prototype.slice.call(from.parentElement.children).indexOf(from);
		var toIndex = Array.prototype.slice.call(to.parentElement.children).indexOf(to);

		if (from.parentNode==to.parentNode) {
			var reverse = self.getReverseAnimation(animation);
			var duration = self.getAnimationDuration(animation, true);

			// if target view is above (higher index)
			// then fade in target view 
			// and after fade in then hide previous view instantly
			if (fromIndex<toIndex) {
				self.setElementAnimation(from, null);
				self.setElementAnimation(to, null);
				self.showViewByMediaQuery(to);
				self.fadeIn(to, update, animation);

				setTimeout(function() {
					self.setElementAnimation(to, null);
					self.setElementAnimation(from, null);
					self.hideView(from);
					self.updateURL();
					self.setViewVariables(to);
					self.updateViewLabel();
				}, duration)
			}
			// if target view is on bottom
			// then show target view instantly 
			// and fade out current view
			else if (fromIndex>toIndex) {
				self.setElementAnimation(to, null);
				self.setElementAnimation(from, null);
				self.showViewByMediaQuery(to);
				self.fadeOut(from, update, reverse);

				setTimeout(function() {
					self.setElementAnimation(to, null);
					self.setElementAnimation(from, null);
					self.hideView(from);
					self.updateURL();
					self.setViewVariables(to);
				}, duration)
			}
		}
	}

	self.fadeIn = function(element, update, animation) {
		self.showViewByMediaQuery(element);

		if (update) {
			self.updateURL(element);

			element.addEventListener("animationend", function(event) {
				element.style.animation = null;
				self.setViewVariables(element);
				self.updateViewLabel();
				element.removeEventListener("animationend", arguments.callee);
			});
		}

		self.setElementAnimation(element, null);
		
		element.style.animation = animation;
	}

	self.fadeOutCurrentView = function(animation, update) {
		if (self.currentView) {
			self.fadeOut(self.currentView, update, animation);
		}
		if (self.currentOverlay) {
			self.fadeOut(self.currentOverlay, update, animation);
		}
	}

	self.fadeOut = function(element, update, animation) {
		if (update) {
			element.addEventListener("animationend", function(event) {
				element.style.animation = null;
				self.hideView(element);
				element.removeEventListener("animationend", arguments.callee);
			});
		}

		element.style.animationPlayState = "paused";
		element.style.animation = animation;
		element.style.animationPlayState = "running";
	}

	self.getReverseAnimation = function(animation) {
		if (animation && animation.indexOf("reverse")==-1) {
			animation += " reverse";
		}

		return animation;
	}

	/**
	 * Get duration in animation string
	 * @param {String} animation animation value
	 * @param {Boolean} inMilliseconds length in milliseconds if true
	 */
	self.getAnimationDuration = function(animation, inMilliseconds) {
		var duration = 0;
		var expression = /.+(\d\.\d)s.+/;

		if (animation && animation.match(expression)) {
			duration = parseFloat(animation.replace(expression, "$" + "1"));
			if (duration && inMilliseconds) duration = duration * 1000;
		}

		return duration;
	}

	self.setElementAnimation = function(element, animation, priority) {
		element.style.setProperty("animation", animation, "important");
	}

	self.getElement = function(id) {
		var elementId = id ? id.trim() : id;
		var element = elementId ? document.getElementById(elementId) : null;

		return element;
	}

	self.getElementByClass = function(className) {
		className = className ? className.trim() : className;
		var elements = document.getElementsByClassName(className);

		return elements.length ? elements[0] : null;
	}

	self.resizeHandler = function(event) {
		
		if (self.showByMediaQuery) {
			if (self.enableDeepLinking) {
				var stateName = self.getHashFragment();

				if (stateName==null || stateName=="") {
					var initialView = self.getInitialView();
					stateName = initialView ? self.getStateNameByViewId(initialView.id) : null;
				}
				self.showMediaQueryViewsByState(stateName, event);
			}
		}
		else {
			var visibleViews = self.getVisibleViews();

			for (let index = 0; index < visibleViews.length; index++) {	
				var view = visibleViews[index];
				self.scaleViewIfNeeded(view);
			}
		}

		window.dispatchEvent(new Event(self.APPLICATION_RESIZE));
	}

	self.scaleViewIfNeeded = function(view) {

		if (self.scaleViewsOnResize) {
			if (view==null) {
				view = self.getVisibleView();
			}

			var isViewScaled = view.getAttributeNS(null, self.SIZE_STATE_NAME)=="false" ? false : true;

			if (isViewScaled) {
				self.scaleViewToFit(view, true);
			}
			else {
				self.scaleViewToActualSize(view);
			}
		}
		else if (view) {
			self.centerView(view);
		}
	}

	self.centerView = function(view) {

		if (self.scaleViewsToFit) {
			self.scaleViewToFit(view, true);
		}
		else {
			self.scaleViewToActualSize(view);  // for centering support for now
		}
	}

	self.preventDoubleClick = function(event) {
		event.stopImmediatePropagation();
	}

	self.getHashFragment = function() {
		var value = window.location.hash ? window.location.hash.replace("#", "") : "";
		return value;
	}

	self.showBlockElement = function(view) {
		view.style.display = "block";
	}

	self.hideElement = function(view) {
		view.style.display = "none";
	}

	self.showStateFunction = null;

	self.showMediaQueryViewsByState = function(state, event) {
		// browser will hide and show by media query (small, medium, large)
		// but if multiple views exists at same size user may want specific view
		// if showStateFunction is defined that is called with state fragment and user can show or hide each media matching view by returning true or false
		// if showStateFunction is not defined and state is defined and view has a defined state that matches then show that and hide other matching views
		// if no state is defined show view 
		// an viewChanging event is dispatched before views are shown or hidden that can be prevented 

		// get all matched queries
		// if state name is specified then show that view and hide other views
		// if no state name is defined then show
		var matchedViews = self.getMatchingViews();
		var matchMediaQuery = true;
		var foundViews = self.getViewsByStateName(state, matchMediaQuery);
		var showViews = [];
		var hideViews = [];

		// loop views that match media query 
		for (let index = 0; index < matchedViews.length; index++) {
			var view = matchedViews[index];
			
			// let user determine visible view
			if (self.showStateFunction!=null) {
				if (self.showStateFunction(view, state)) {
					showViews.push(view);
				}
				else {
					hideViews.push(view);
				}
			}
			// state was defined so check if view matches state
			else if (foundViews.length) {

				if (foundViews.indexOf(view)!=-1) {
					showViews.push(view);
				}
				else {
					hideViews.push(view);
				}
			}
			// if no state names are defined show view (define unused state name to exclude)
			else if (state==null || state=="") {
				showViews.push(view);
			}
		}

		if (showViews.length) {
			var viewChangingEvent = new Event(self.VIEW_CHANGING);
			viewChangingEvent.showViews = showViews;
			viewChangingEvent.hideViews = hideViews;
			window.dispatchEvent(viewChangingEvent);

			if (viewChangingEvent.defaultPrevented==false) {
				for (var index = 0; index < hideViews.length; index++) {
					var view = hideViews[index];

					if (self.isOverlay(view)) {
						self.removeOverlay(view);
					}
					else {
						self.hideElement(view);
					}
				}

				for (var index = 0; index < showViews.length; index++) {
					var view = showViews[index];

					if (index==showViews.length-1) {
						self.clearDisplay(view);
						self.setViewOptions(view);
						self.setViewVariables(view);
						self.centerView(view);
						self.updateURLState(view, state);
					}
				}
			}

			var viewChangeEvent = new Event(self.VIEW_CHANGE);
			viewChangeEvent.showViews = showViews;
			viewChangeEvent.hideViews = hideViews;
			window.dispatchEvent(viewChangeEvent);
		}
		
	}

	self.clearDisplay = function(view) {
		view.style.setProperty("display", null);
	}

	self.hashChangeHandler = function(event) {
		var fragment = self.getHashFragment();
		var view = self.getViewById(fragment);

		if (self.showByMediaQuery) {
			var stateName = fragment;

			if (stateName==null || stateName=="") {
				var initialView = self.getInitialView();
				stateName = initialView ? self.getStateNameByViewId(initialView.id) : null;
			}
			self.showMediaQueryViewsByState(stateName);
		}
		else {
			if (view) {
				self.hideViews();
				self.showView(view);
				self.setViewVariables(view);
				self.updateViewLabel();
				
				window.dispatchEvent(new Event(self.VIEW_CHANGE));
			}
			else {
				window.dispatchEvent(new Event(self.VIEW_NOT_FOUND));
			}
		}
	}

	self.popStateHandler = function(event) {
		var state = event.state;
		var fragment = state ? state.name : window.location.hash;
		var view = self.getViewById(fragment);

		if (view) {
			self.hideViews();
			self.showView(view);
			self.updateViewLabel();
		}
		else {
			window.dispatchEvent(new Event(self.VIEW_NOT_FOUND));
		}
	}

	self.doubleClickHandler = function(event) {
		var view = self.getVisibleView();
		var scaleValue = view ? self.getViewScaleValue(view) : 1;
		var scaleNeededToFit = view ? self.getViewFitToViewportScale(view) : 1;
		var scaleNeededToFitWidth = view ? self.getViewFitToViewportWidthScale(view) : 1;
		var scaleNeededToFitHeight = view ? self.getViewFitToViewportHeightScale(view) : 1;
		var scaleToFitType = self.scaleToFitType;

		// Three scenarios
		// - scale to fit on double click
		// - set scale to actual size on double click
		// - switch between scale to fit and actual page size

		if (scaleToFitType=="width") {
			scaleNeededToFit = scaleNeededToFitWidth;
		}
		else if (scaleToFitType=="height") {
			scaleNeededToFit = scaleNeededToFitHeight;
		}

		// if scale and actual size enabled then switch between
		if (self.scaleToFitOnDoubleClick && self.actualSizeOnDoubleClick) {
			var isViewScaled = view.getAttributeNS(null, self.SIZE_STATE_NAME);
			var isScaled = false;
			
			// if scale is not 1 then view needs scaling
			if (scaleNeededToFit!=1) {

				// if current scale is at 1 it is at actual size
				// scale it to fit
				if (scaleValue==1) {
					self.scaleViewToFit(view);
					isScaled = true;
				}
				else {
					// scale is not at 1 so switch to actual size
					self.scaleViewToActualSize(view);
					isScaled = false;
				}
			}
			else {
				// view is smaller than viewport 
				// so scale to fit() is scale actual size
				// actual size and scaled size are the same
				// but call scale to fit to retain centering
				self.scaleViewToFit(view);
				isScaled = false;
			}
			
			view.setAttributeNS(null, self.SIZE_STATE_NAME, isScaled+"");
			isViewScaled = view.getAttributeNS(null, self.SIZE_STATE_NAME);
		}
		else if (self.scaleToFitOnDoubleClick) {
			self.scaleViewToFit(view);
		}
		else if (self.actualSizeOnDoubleClick) {
			self.scaleViewToActualSize(view);
		}

	}

	self.scaleViewToFit = function(view) {
		return self.setViewScaleValue(view, true);
	}

	self.scaleViewToActualSize = function(view) {
		self.setViewScaleValue(view, false, 1);
	}

	self.onloadHandler = function(event) {
		self.initialize();
	}

	self.setElementHTML = function(id, value) {
		var element = self.getElement(id);
		element.innerHTML = value;
	}

	self.getStackArray = function(error) {
		var value = "";
		
		if (error==null) {
		  try {
			 error = new Error("Stack");
		  }
		  catch (e) {
			 
		  }
		}
		
		if ("stack" in error) {
		  value = error.stack;
		  var methods = value.split(/\n/g);
	 
		  var newArray = methods ? methods.map(function (value, index, array) {
			 value = value.replace(/\@.*/,"");
			 return value;
		  }) : null;
	 
		  if (newArray && newArray[0].includes("getStackTrace")) {
			 newArray.shift();
		  }
		  if (newArray && newArray[0].includes("getStackArray")) {
			 newArray.shift();
		  }
		  if (newArray && newArray[0]=="") {
			 newArray.shift(); 
		  }
	 
			return newArray;
		}
		
		return null;
	}

	self.log = function(value) {
		console.log.apply(this, [value]);
	}
	
	// initialize on load
	// sometimes the body size is 0 so we call this now and again later
	window.addEventListener("load", self.onloadHandler);
	window.document.addEventListener("DOMContentLoaded", self.onloadHandler);
}

window.application = new Application();
</script>
</head>
<body>
<view id="ID10_-_">
	<view id="ID0800_PM__Remainder">
		<text>08:00 PM</text><text style="font-family:Heiti SC;font-style:normal;font-weight:lighter;"> | </text><text style="font-style:normal;font-weight:normal;">Remainder</text>
	</view>
	<svg class="_61" viewBox="0 0 67 4">
		<path id="_61" d="M 0 0 L 67 0">
		</path>
	</svg>
	<view id="menu_icons">
		<svg class="_10">
			<ellipse id="_10" rx="27.5" ry="27.5" cx="27.5" cy="27.5">
			</ellipse>
		</svg>
		<view id="_3">
			<svg class="_1" viewBox="0 0 26 3">
				<path id="_1" d="M 0 0 L 26 0">
				</path>
			</svg>
			<svg class="_2" viewBox="0 0 26 3">
				<path id="_2" d="M 0 0 L 26 0">
				</path>
			</svg>
		</view>
	</view>
	<view id="_">
		<text>张 铁柱</text>
	</view>
	<view id="__45__">
		<text>男 | 45岁 | 程序员</text>
	</view>
	<view id="_395">
		<view id="ppic">
			<image id="grayscale-photo-of-man-2659177" src="grayscale-photo-of-man-2659177.png" srcset="grayscale-photo-of-man-2659177.png 1x, grayscale-photo-of-man-2659177@2x.png 2x"/>
				
			<svg class="grayscale-photo-of-man-2659177_bd">
				<rect id="grayscale-photo-of-man-2659177_bd" rx="18" ry="18" x="0" y="0" width="55" height="55">
				</rect>
			</svg>
		</view>
		<view id="dot">
			<svg class="_12">
				<ellipse id="_12" rx="7" ry="7" cx="7" cy="7">
				</ellipse>
			</svg>
			<svg class="_13">
				<ellipse id="_13" rx="4" ry="4" cx="4" cy="4">
				</ellipse>
			</svg>
		</view>
	</view>
	<svg class="_5627" viewBox="0 -14.002 18 16.002">
		<path onclick="application.goToTargetView(event)" id="_5627" d="M 12.57186889648438 -3.22186279296875 C 12.52499389648438 -3.17498779296875 12.5 -3.11248779296875 12.5 -3.046875 L 12.5 0.5 L 1.5 0.5 L 1.5 -10.5 L 9.046875 -10.5 C 9.115631103515625 -10.5 9.178131103515625 -10.52499389648438 9.225006103515625 -10.57186889648438 L 10.22500610351562 -11.57186889648438 C 10.38125610351562 -11.73126220703125 10.26873779296875 -12 10.046875 -12 L 1.5 -12 C 0.671875 -12 0 -11.328125 0 -10.5 L 0 0.5 C 0 1.328125 0.671875 2 1.5 2 L 12.5 2 C 13.328125 2 14 1.328125 14 0.5 L 14 -4.04376220703125 C 14 -4.26873779296875 13.72811889648438 -4.37811279296875 13.57186889648438 -4.22186279296875 L 12.57186889648438 -3.22186279296875 Z M 17.46563720703125 -9.52813720703125 C 18.17813110351562 -10.24063110351562 18.17813110351562 -11.39999389648438 17.46249389648438 -12.11563110351562 L 16.11248779296875 -13.46563720703125 C 15.39999389648438 -14.18124389648438 14.24374389648438 -14.18124389648438 13.52813720703125 -13.46563720703125 L 5.321868896484375 -5.259368896484375 L 5.009368896484375 -2.43438720703125 C 4.91876220703125 -1.609375 5.615631103515625 -0.91876220703125 6.43438720703125 -1.009368896484375 L 9.259368896484375 -1.321868896484375 L 17.46563720703125 -9.52813720703125 Z M 14.37811279296875 -8.5625 L 8.568756103515625 -2.756256103515625 L 6.52813720703125 -2.52813720703125 L 6.756256103515625 -4.568756103515625 L 12.5625 -10.37811279296875 L 14.37811279296875 -8.5625 Z M 16.40313720703125 -11.05313110351562 C 16.53125 -10.92498779296875 16.53125 -10.71875 16.40625 -10.58749389648438 L 15.44061279296875 -9.62188720703125 L 13.625 -11.4375 L 14.59063720703125 -12.40313720703125 C 14.71563720703125 -12.53125 14.92498779296875 -12.53125 15.05313110351562 -12.40313720703125 L 16.40313720703125 -11.05313110351562 Z">
		</path>
	</svg>
	<svg class="_56">
		<rect id="_56" rx="30" ry="30" x="0" y="0" width="414" height="248">
		</rect>
	</svg>
	<view id="">
		<text>预约</text>
	</view>
	<view id="_bk">
		<text>医生</text>
	</view>
	<view id="_bl">
		<text>就诊</text>
	</view>
	<view id="_bm">
		<text>服药日历</text>
	</view>
	<view id="ID10_">
		<text>10 条记录</text>
	</view>
	<view onclick="application.goToTargetView(event)" id="ID8_">
		<text>8 位医生好友</text>
	</view>
	<view id="ID7_">
		<text>7 条记录</text>
	</view>
	<view id="ID4_">
		<text>4 条药物记录</text>
	</view>
	<svg class="_5626" viewBox="0 -15.004 25.004 15.008">
		<path id="_5626" d="M 0.625 -5.007820129394531 C 0.9687423706054688 -5.007820129394531 1.25 -5.289077758789062 1.25 -5.632820129394531 C 1.25 -5.9765625 0.9687423706054688 -6.257820129394531 0.625 -6.257820129394531 C 0.2812576293945312 -6.257820129394531 0 -5.9765625 0 -5.632820129394531 C 0 -5.285148620605469 0.2812576293945312 -5.007820129394531 0.625 -5.007820129394531 Z M 24.6875 -12.5 L 20.25390625 -12.49217987060547 L 18.25389862060547 -14.44141387939453 C 17.89844512939453 -14.79686737060547 17.42969512939453 -14.99217987060547 16.92970275878906 -14.99217987060547 L 12.98439025878906 -14.99217987060547 C 12.578125 -14.99217987060547 12.19921112060547 -14.83985900878906 11.87889099121094 -14.60155487060547 C 11.55078887939453 -14.85546112060547 11.14845275878906 -15.00389099121094 10.73436737060547 -15.00389099121094 L 8.019523620605469 -15.00389099121094 C 7.523422241210938 -15.00389099121094 7.046890258789062 -14.8046875 6.695327758789062 -14.453125 L 4.742202758789062 -12.5 L 0.3125 -12.5 C 0.1406097412109375 -12.5 0 -12.35939025878906 0 -12.1875 L 0 -11.5625 C 0 -11.39060974121094 0.1406097412109375 -11.25 0.3125 -11.25 L 2.5 -11.25 L 2.5 -3.753890991210938 L 0.3125 -3.753890991210938 C 0.1406097412109375 -3.753890991210938 0 -3.61328125 0 -3.441390991210938 L 0 -2.816390991210938 C 0 -2.644538879394531 0.1406097412109375 -2.503890991210938 0.3125 -2.503890991210938 L 2.5 -2.503890991210938 C 3.187484741210938 -2.503890991210938 3.742179870605469 -3.058586120605469 3.746109008789062 -3.742179870605469 L 5.042953491210938 -3.742179870605469 L 8.226547241210938 -0.6953048706054688 C 9.390640258789062 0.2460861206054688 11.03126525878906 0.2187347412109375 12.17185974121094 -0.703125 L 12.45311737060547 -0.4609298706054688 C 12.82814025878906 -0.15625 13.28514099121094 0.0038909912109375 13.76171112060547 0.0038909912109375 C 14.38671112060547 0.0038909912109375 14.97657775878906 -0.2695465087890625 15.37891387939453 -0.76171875 L 16.23435974121094 -1.812515258789062 C 16.875 -1.46484375 17.91015625 -1.460952758789062 18.57810974121094 -2.281265258789062 L 18.94920349121094 -2.738265991210938 C 19.19139862060547 -3.035163879394531 19.32422637939453 -3.386726379394531 19.35935974121094 -3.742179870605469 L 21.25782012939453 -3.742179870605469 C 21.26171112060547 -3.058586120605469 21.82029724121094 -2.503890991210938 22.50389099121094 -2.503890991210938 L 24.69139099121094 -2.503890991210938 C 24.86328125 -2.503890991210938 25.00389099121094 -2.644538879394531 25.00389099121094 -2.816390991210938 L 25.00389099121094 -3.441390991210938 C 25.00389099121094 -3.61328125 24.86328125 -3.753890991210938 24.69139099121094 -3.753890991210938 L 22.50389099121094 -3.753890991210938 L 22.50389099121094 -11.24217987060547 L 24.69139099121094 -11.25 C 24.86328125 -11.25 25.00389099121094 -11.39060974121094 25.00389099121094 -11.5625 L 25.00389099121094 -12.1875 C 25 -12.36328125 24.85939025878906 -12.5 24.6875 -12.5 Z M 17.97657012939453 -3.531265258789062 L 17.60547637939453 -3.074226379394531 C 17.39452362060547 -2.816390991210938 17.00389862060547 -2.757797241210938 16.72657012939453 -2.984390258789062 L 16.03126525878906 -3.546867370605469 L 14.41017150878906 -1.554679870605469 C 14.11720275878906 -1.19140625 13.58985900878906 -1.156234741210938 13.26171875 -1.421890258789062 L 12.06642150878906 -2.44140625 L 11.66015625 -1.941413879394531 C 11.00780487060547 -1.140632629394531 9.82421875 -1.015625 9.058609008789062 -1.632804870605469 L 5.546875 -4.996109008789062 L 3.75 -4.996109008789062 L 3.75 -11.25389099121094 L 5.257797241210938 -11.25389099121094 L 7.574234008789062 -13.57032775878906 C 7.691421508789062 -13.68751525878906 7.8515625 -13.75389099121094 8.015632629394531 -13.75389099121094 L 10.73047637939453 -13.75389099121094 C 10.76560974121094 -13.66798400878906 10.7421875 -13.72657775878906 10.77342987060547 -13.64063262939453 L 8.468742370605469 -11.5234375 C 7.367172241210938 -10.51170349121094 7.312507629394531 -8.820304870605469 8.304672241210938 -7.738265991210938 C 8.863296508789062 -7.12890625 10.59375762939453 -6.203117370605469 12.08984375 -7.574234008789062 L 12.98046112060547 -8.390617370605469 L 17.88673400878906 -4.410171508789062 C 18.15235137939453 -4.191398620605469 18.19141387939453 -3.796882629394531 17.97657012939453 -3.531265258789062 Z M 21.25 -4.996109008789062 L 19.01561737060547 -4.996109008789062 C 18.91796112060547 -5.132827758789062 18.80859375 -5.265617370605469 18.671875 -5.378913879394531 L 13.91014099121094 -9.246101379394531 L 15.01953125 -10.26561737060547 C 15.2734375 -10.49999237060547 15.29296875 -10.89454650878906 15.05859375 -11.14845275878906 C 14.82421875 -11.40235900878906 14.42970275878906 -11.41796112060547 14.17579650878906 -11.18751525878906 L 11.24217987060547 -8.499984741210938 C 10.67970275878906 -7.98828125 9.734382629394531 -8.031234741210938 9.222640991210938 -8.585929870605469 C 8.69140625 -9.164047241210938 8.726577758789062 -10.07030487060547 9.308586120605469 -10.60546875 L 12.55470275878906 -13.58203887939453 C 12.67189025878906 -13.68751525878906 12.82032012939453 -13.74610900878906 12.97657012939453 -13.74610900878906 L 16.92188262939453 -13.74610900878906 C 17.08984375 -13.74610900878906 17.24609375 -13.67969512939453 17.36717224121094 -13.55857849121094 L 19.73827362060547 -11.25 L 21.25 -11.25 L 21.25 -4.996109008789062 Z M 24.375 -6.253890991210938 C 24.03125762939453 -6.253890991210938 23.75 -5.972671508789062 23.75 -5.628890991210938 C 23.75 -5.285148620605469 24.03125762939453 -5.003890991210938 24.375 -5.003890991210938 C 24.71874237060547 -5.003890991210938 25 -5.285148620605469 25 -5.628890991210938 C 25 -5.9765625 24.71874237060547 -6.253890991210938 24.375 -6.253890991210938 Z">
		</path>
	</svg>
	<svg class="_5623" viewBox="0 -16.25 20 18.75">
		<path id="_5623" d="M 13.4375 -6.25 L 11.25 -6.25 L 11.25 -8.4375 C 11.25 -8.609390258789062 11.10939025878906 -8.75 10.9375 -8.75 L 9.0625 -8.75 C 8.890609741210938 -8.75 8.75 -8.609390258789062 8.75 -8.4375 L 8.75 -6.25 L 6.5625 -6.25 C 6.390609741210938 -6.25 6.25 -6.109390258789062 6.25 -5.9375 L 6.25 -4.0625 C 6.25 -3.890609741210938 6.390609741210938 -3.75 6.5625 -3.75 L 8.75 -3.75 L 8.75 -1.5625 C 8.75 -1.390609741210938 8.890609741210938 -1.25 9.0625 -1.25 L 10.9375 -1.25 C 11.10939025878906 -1.25 11.25 -1.390609741210938 11.25 -1.5625 L 11.25 -3.75 L 13.4375 -3.75 C 13.60939025878906 -3.75 13.75 -3.890609741210938 13.75 -4.0625 L 13.75 -5.9375 C 13.75 -6.109390258789062 13.60939025878906 -6.25 13.4375 -6.25 Z M 18.125 -12.5 L 13.75 -12.5 L 13.75 -15.3125 C 13.75 -15.83202362060547 13.33202362060547 -16.25 12.8125 -16.25 L 7.1875 -16.25 C 6.667976379394531 -16.25 6.25 -15.83202362060547 6.25 -15.3125 L 6.25 -12.5 L 1.875 -12.5 C 0.83984375 -12.5 0 -11.66015625 0 -10.625 L 0 0.625 C 0 1.66015625 0.83984375 2.5 1.875 2.5 L 18.125 2.5 C 19.16015625 2.5 20 1.66015625 20 0.625 L 20 -10.625 C 20 -11.66015625 19.16015625 -12.5 18.125 -12.5 Z M 7.5 -15 L 12.5 -15 L 12.5 -12.5 L 7.5 -12.5 L 7.5 -15 Z M 18.75 0.625 C 18.75 0.9687423706054688 18.46874237060547 1.25 18.125 1.25 L 1.875 1.25 C 1.531257629394531 1.25 1.25 0.9687423706054688 1.25 0.625 L 1.25 -10.625 C 1.25 -10.96874237060547 1.531257629394531 -11.25 1.875 -11.25 L 18.125 -11.25 C 18.46874237060547 -11.25 18.75 -10.96874237060547 18.75 -10.625 L 18.75 0.625 Z">
		</path>
	</svg>
	<svg class="_5625" viewBox="0 -17.5 17.5 20">
		<path id="_5625" d="M 15.625 -15 L 13.75 -15 L 13.75 -17.03125 C 13.75 -17.29011535644531 13.54011535644531 -17.5 13.28125 -17.5 L 12.96875 -17.5 C 12.70988464355469 -17.5 12.5 -17.29011535644531 12.5 -17.03125 L 12.5 -15 L 5 -15 L 5 -17.03125 C 5 -17.29011535644531 4.790115356445312 -17.5 4.53125 -17.5 L 4.21875 -17.5 C 3.959884643554688 -17.5 3.75 -17.29011535644531 3.75 -17.03125 L 3.75 -15 L 1.875 -15 C 0.8394622802734375 -15 0 -14.16053771972656 0 -13.125 L 0 0.625 C 0 1.660537719726562 0.8394622802734375 2.5 1.875 2.5 L 15.625 2.5 C 16.66053771972656 2.5 17.5 1.660537719726562 17.5 0.625 L 17.5 -13.125 C 17.5 -14.16053771972656 16.66053771972656 -15 15.625 -15 Z M 1.875 -13.75 L 15.625 -13.75 C 15.96961975097656 -13.75 16.25 -13.46961975097656 16.25 -13.125 L 16.25 -11.25 L 1.25 -11.25 L 1.25 -13.125 C 1.25 -13.46961975097656 1.530380249023438 -13.75 1.875 -13.75 Z M 15.625 1.25 L 1.875 1.25 C 1.530380249023438 1.25 1.25 0.9696197509765625 1.25 0.625 L 1.25 -10 L 16.25 -10 L 16.25 0.625 C 16.25 0.9696197509765625 15.96961975097656 1.25 15.625 1.25 Z M 13.02864074707031 -6.364707946777344 C 13.21258544921875 -6.547203063964844 13.21380615234375 -6.844215393066406 13.03127288818359 -7.028160095214844 L 12.70088195800781 -7.361259460449219 C 12.51838684082031 -7.545204162597656 12.22137451171875 -7.546348571777344 12.03742980957031 -7.3638916015625 L 7.436561584472656 -2.799949645996094 L 5.466156005859375 -4.7760009765625 C 5.283241271972656 -4.959449768066406 4.986228942871094 -4.959869384765625 4.802742004394531 -4.776954650878906 L 4.47052001953125 -4.445686340332031 C 4.287071228027344 -4.262733459472656 4.286651611328125 -3.965721130371094 4.469566345214844 -3.782234191894531 L 7.100753784179688 -1.14349365234375 C 7.283363342285156 -0.9603500366210938 7.579765319824219 -0.9595489501953125 7.76336669921875 -1.14166259765625 L 13.02864074707031 -6.364707946777344 Z">
		</path>
	</svg>
	<svg class="_5624" viewBox="0 -17.498 20 19.998">
		<path id="_5624" d="M 16.80076599121094 -13.73046875 C 15.09765625 -13.69140625 13.72657775878906 -12.265625 13.75 -10.56251525878906 C 13.76953125 -9.070320129394531 14.83592987060547 -7.83203125 16.25 -7.546882629394531 L 16.25 -3.421859741210938 C 16.25 -0.8476638793945312 14.00779724121094 1.246109008789062 11.25 1.246109008789062 C 8.492202758789062 1.246109008789062 6.25 -0.8476638793945312 6.25 -3.421859741210938 L 6.25 -3.76953125 C 9.058609008789062 -4.08203125 11.25 -6.468734741210938 11.25 -9.359359741210938 L 11.25 -16.49219512939453 C 11.25 -16.70703887939453 11.10546112060547 -16.89453125 10.89454650878906 -16.94530487060547 L 8.73046875 -17.48435974121094 C 8.480453491210938 -17.54688262939453 8.226547241210938 -17.39452362060547 8.160171508789062 -17.14454650878906 L 8.0859375 -16.83982849121094 C 8.023452758789062 -16.58985137939453 8.175773620605469 -16.33594512939453 8.425788879394531 -16.26953125 L 10 -15.87890625 L 10 -9.402351379394531 C 10 -6.988296508789062 8.06640625 -4.992179870605469 5.652351379394531 -4.98046875 C 3.226547241210938 -4.964828491210938 1.25 -6.93359375 1.25 -9.35546875 L 1.25 -15.87890625 L 2.820320129394531 -16.27342224121094 C 3.070297241210938 -16.33594512939453 3.22265625 -16.58985137939453 3.160171508789062 -16.84375762939453 L 3.0859375 -17.14454650878906 C 3.023452758789062 -17.39452362060547 2.769546508789062 -17.54688262939453 2.515640258789062 -17.48435974121094 L 0.3554534912109375 -16.94530487060547 C 0.1445388793945312 -16.89453125 0 -16.70703887939453 0 -16.49219512939453 L 0 -9.359359741210938 C 0 -6.468734741210938 2.191390991210938 -4.08203125 5 -3.76953125 L 5 -3.421859741210938 C 5 -0.15625 7.804679870605469 2.5 11.25 2.5 C 14.69532012939453 2.5 17.5 -0.15625 17.5 -3.41796875 L 17.5 -7.542953491210938 C 18.92578125 -7.83203125 20 -9.093742370605469 20 -10.60546875 C 20 -12.35939025878906 18.55857849121094 -13.77342224121094 16.80076599121094 -13.73046875 Z M 16.875 -8.73046875 C 15.83984375 -8.73046875 15 -9.5703125 15 -10.60546875 C 15 -11.640625 15.83984375 -12.48046875 16.875 -12.48046875 C 17.91015625 -12.48046875 18.75 -11.640625 18.75 -10.60546875 C 18.75 -9.5703125 17.91015625 -8.73046875 16.875 -8.73046875 Z M 17.79296875 -10.60546875 C 17.79296875 -11.11328125 17.3828125 -11.5234375 16.875 -11.5234375 C 16.3671875 -11.5234375 15.95703125 -11.11328125 15.95703125 -10.60546875 C 15.95703125 -10.09765625 16.3671875 -9.6875 16.875 -9.6875 C 17.3828125 -9.6875 17.79296875 -10.09765625 17.79296875 -10.60546875 Z">
		</path>
	</svg>
	<svg class="_137">
		<rect id="_137" rx="30" ry="30" x="0" y="0" width="414" height="90">
		</rect>
	</svg>
	<svg class="_138">
		<rect id="_138" rx="30" ry="30" x="0" y="0" width="414" height="90">
		</rect>
	</svg>
	<view id="_bx">
		<text>病历本</text>
	</view>
	<view id="_by">
		<text>病情分析</text>
	</view>
	<view id="ID7__bz">
		<text>7 条病历记录</text>
	</view>
	<view id="_b">
		<text>查看病情分析</text>
	</view>
	<svg class="_5621" viewBox="-21 -19.455 21 20.911">
		<path id="_5621" d="M -10.85325622558594 -19.29071044921875 L -11.18472290039062 -18.95928955078125 C -11.40435791015625 -18.73965454101562 -11.40435791015625 -18.38346862792969 -11.18472290039062 -18.16378784179688 L -2.81781005859375 -9.796875 L -20.4375 -9.796875 C -20.74813842773438 -9.796875 -21 -9.545013427734375 -21 -9.234375 L -21 -8.765625 C -21 -8.454986572265625 -20.74813842773438 -8.203125 -20.4375 -8.203125 L -2.81781005859375 -8.203125 L -11.18472290039062 0.163787841796875 C -11.40435791015625 0.3834228515625 -11.40435791015625 0.7396087646484375 -11.18472290039062 0.95928955078125 L -10.85325622558594 1.29071044921875 C -10.63357543945312 1.510345458984375 -10.27743530273438 1.510345458984375 -10.05780029296875 1.29071044921875 L -0.1647491455078125 -8.602249145507812 C 0.0548858642578125 -8.821929931640625 0.0548858642578125 -9.178070068359375 -0.1647491455078125 -9.397796630859375 L -10.05780029296875 -19.29071044921875 C -10.27743530273438 -19.51039123535156 -10.63357543945312 -19.51039123535156 -10.85325622558594 -19.29071044921875 Z">
		</path>
	</svg>
	<svg class="_5620" viewBox="-21 -19.455 21 20.911">
		<path id="_5620" d="M -10.85325622558594 -19.29071044921875 L -11.18472290039062 -18.95928955078125 C -11.40435791015625 -18.73965454101562 -11.40435791015625 -18.38346862792969 -11.18472290039062 -18.16378784179688 L -2.81781005859375 -9.796875 L -20.4375 -9.796875 C -20.74813842773438 -9.796875 -21 -9.545013427734375 -21 -9.234375 L -21 -8.765625 C -21 -8.454986572265625 -20.74813842773438 -8.203125 -20.4375 -8.203125 L -2.81781005859375 -8.203125 L -11.18472290039062 0.163787841796875 C -11.40435791015625 0.3834228515625 -11.40435791015625 0.7396087646484375 -11.18472290039062 0.95928955078125 L -10.85325622558594 1.29071044921875 C -10.63357543945312 1.510345458984375 -10.27743530273438 1.510345458984375 -10.05780029296875 1.29071044921875 L -0.1647491455078125 -8.602249145507812 C 0.0548858642578125 -8.821929931640625 0.0548858642578125 -9.178070068359375 -0.1647491455078125 -9.397796630859375 L -10.05780029296875 -19.29071044921875 C -10.27743530273438 -19.51039123535156 -10.63357543945312 -19.51039123535156 -10.85325622558594 -19.29071044921875 Z">
		</path>
	</svg>
	<svg class="_129">
		<rect id="_129" rx="0" ry="0" x="0" y="0" width="414" height="187">
		</rect>
	</svg>
	<svg class="_5629" viewBox="0.344 -18.906 21.313 21.313">
		<path onclick="application.goToTargetView(event)" id="_5629" d="M 11 2.40625 C 16.88671875 2.40625 21.65625 -2.36328125 21.65625 -8.25 C 21.65625 -14.13671875 16.88671875 -18.90625 11 -18.90625 C 5.11328125 -18.90625 0.34375 -14.13671875 0.34375 -8.25 C 0.34375 -2.36328125 5.11328125 2.40625 11 2.40625 Z M 12.24181365966797 -3.764045715332031 C 12.65857696533203 -3.364444732666016 12.66717910766602 -2.698429107666016 12.25897598266602 -2.290225982666016 L 11.78631973266602 -1.821891784667969 C 11.38671875 -1.41796875 10.73358535766602 -1.41796875 10.32970428466797 -1.821891784667969 L 4.627742767333984 -7.523811340332031 C 4.223819732666016 -7.923454284667969 4.223819732666016 -8.576545715332031 4.627742767333984 -8.98046875 L 10.32970428466797 -14.67810821533203 C 10.72930526733398 -15.08203125 11.38243865966797 -15.08203125 11.78631973266602 -14.67810821533203 L 12.25897598266602 -14.20977401733398 C 12.66717910766602 -13.80157089233398 12.65857696533203 -13.13555526733398 12.24181365966797 -12.73595428466797 L 8.997673034667969 -9.625 L 16.84375 -9.625 C 17.41522598266602 -9.625 17.875 -9.165225982666016 17.875 -8.59375 L 17.875 -7.90625 C 17.875 -7.334774017333984 17.41522598266602 -6.875 16.84375 -6.875 L 8.997673034667969 -6.875 L 12.24181365966797 -3.764045715332031 Z">
		</path>
	</svg>
	<view id="_ca">
		<text>个人资料</text>
	</view>
	<view id="menu_icons_b">
		<svg class="_10_b">
			<ellipse id="_10_b" rx="27.5" ry="27.5" cx="27.5" cy="27.5">
			</ellipse>
		</svg>
		<view id="_3_b">
			<svg class="_1_b" viewBox="0 0 26 3">
				<path id="_1_b" d="M 0 0 L 26 0">
				</path>
			</svg>
			<svg class="_2_ca" viewBox="0 0 26 3">
				<path id="_2_ca" d="M 0 0 L 26 0">
				</path>
			</svg>
		</view>
	</view>
</view>
</body>
</html>